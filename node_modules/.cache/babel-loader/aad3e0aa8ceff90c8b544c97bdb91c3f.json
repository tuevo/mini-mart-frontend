{"ast":null,"code":"var _jsxFileName = \"/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/src/components/pages/Manager/WorkAssignment/BtnAddWorkShiftAssigner/BtnAddWorkShiftAssigner.js\";\nimport React from 'react';\nimport { UsergroupAddOutlined } from '@ant-design/icons';\nimport { Button, Modal, Tooltip, message, List, Avatar, Row, Col, Checkbox } from 'antd';\nimport './BtnAddWorkShiftAssigner.style.scss';\nimport { withCookies } from 'react-cookie';\nimport { COOKIE_NAMES } from '../../../../../constants/cookie-name.constant';\nimport { API } from '../../../../../constants/api.constant';\nimport PageBase from '../../../../utilities/PageBase/PageBase';\nimport USER_ROLES from '../../../../../constants/user-role.constant';\n\nclass BtnAddWorkShiftAssigner extends PageBase {\n  constructor(props) {\n    super(props);\n\n    this.loadStaffs = async () => {\n      const res = await (await fetch(API.Manager.StaffManagement.getListStaffs, {\n        method: 'GET',\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n          'token': this.props.cookies.get(COOKIE_NAMES.token)\n        },\n        signal: this.abortController.signal\n      })).json();\n\n      if (res.status === 200) {\n        const {\n          users\n        } = res.data;\n        this.setState({\n          staffs: users.filter(u => u.role !== USER_ROLES.MANAGER.type)\n        });\n      } else {\n        message.error(res.errors[0]);\n      }\n    };\n\n    this.state = {\n      isVisible: false,\n      staffs: [],\n      assigners: [],\n      isAllStaffsChecked: false,\n      selectedWorkShift: {}\n    };\n  }\n\n  componentDidMount() {\n    this.loadStaffs();\n  }\n\n  isWorkShiftAssigner(selectedWorkShift, staff) {\n    const assigner = selectedWorkShift.workAssignments.find(wa => wa.assigner.id === staff._id);\n    return assigner;\n  }\n\n  setModalVisible(isVisible) {\n    if (isVisible) {\n      const {\n        selectedWorkShift\n      } = this.props;\n      this.setState({\n        selectedWorkShift\n      });\n      let {\n        staffs\n      } = this.state;\n      staffs = staffs.filter(s => !this.isWorkShiftAssigner(selectedWorkShift, s));\n      this.setState({\n        staffs\n      });\n    }\n\n    this.setState({\n      isVisible\n    });\n  }\n\n  onOK() {}\n\n  onCancel() {\n    this.setModalVisible(false);\n  }\n\n  onCheckStaff(e, staffID) {\n    const {\n      checked\n    } = e.target;\n    let {\n      assigners,\n      staffs\n    } = this.state;\n\n    if (checked) {\n      assigners.push(staffID);\n\n      if (assigners.length === staffs.length) {\n        this.setState({\n          isAllStaffsChecked: true\n        });\n      }\n    } else {\n      assigners = assigners.filter(id => id !== staffID);\n\n      if (assigners.length < staffs.length) {\n        this.setState({\n          isAllStaffsChecked: false\n        });\n      }\n    }\n\n    this.setState({\n      assigners\n    });\n  }\n\n  onCheckAllStaffs(e) {\n    const {\n      checked\n    } = e.target;\n    const {\n      isAllStaffsChecked,\n      staffs\n    } = this.state;\n    this.setState({\n      isAllStaffsChecked: !isAllStaffsChecked\n    });\n    let {\n      assigners\n    } = this.state;\n\n    if (checked) {\n      assigners = staffs.map(staff => staff._id);\n    } else {\n      assigners = [];\n    }\n\n    this.setState({\n      assigners\n    });\n  }\n\n  render() {\n    let {\n      staffs,\n      assigners\n    } = this.state;\n    console.log(staffs);\n    return React.createElement(\"div\", {\n      className: \"add-work-shift-assigner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      placement: \"bottom\",\n      title: \"Th\\xEAm nh\\xE2n vi\\xEAn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => this.setModalVisible(true),\n      className: \"add-work-shift-assigner__btn-open\",\n      type: \"link\",\n      icon: React.createElement(UsergroupAddOutlined, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }),\n      disabled: this.props.isBtnOpenDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })), React.createElement(Modal, {\n      title: \"Ph\\xE2n c\\xF4ng nh\\xE2n vi\\xEAn\",\n      centered: true,\n      visible: this.state.isVisible,\n      onOk: () => this.onOK(),\n      onCancel: () => this.onCancel(),\n      okText: \"Ph\\xE2n c\\xF4ng\",\n      cancelText: \"H\\u1EE7y b\\u1ECF\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"add-work-shift-assigner__list-staffs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"add-work-shift-assigner__list-staffs__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 21,\n      className: \"add-work-shift-assigner__list-staffs__header__col-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Nh\\xE2n vi\\xEAn ch\\u01B0a \\u0111\\u01B0\\u1EE3c ph\\xE2n c\\xF4ng\")), React.createElement(Col, {\n      span: 3,\n      className: \"add-work-shift-assigner__list-staffs__header__col-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      onChange: e => this.onCheckAllStaffs(e),\n      checked: this.state.isAllStaffsChecked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }))), React.createElement(List, {\n      itemLayout: \"horizontal\",\n      dataSource: staffs,\n      renderItem: staff => React.createElement(List.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Row, {\n        style: {\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Col, {\n        span: 21,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(List.Item.Meta, {\n        avatar: React.createElement(Avatar, {\n          src: staff.avatar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }),\n        title: staff.fullname,\n        description: USER_ROLES[staff.role].name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      })), React.createElement(Col, {\n        span: 3,\n        className: \"add-work-shift-assigner__list-staffs__checkbox-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        onChange: e => this.onCheckStaff(e, staff._id),\n        checked: assigners.find(id => id === staff._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default withCookies(BtnAddWorkShiftAssigner);","map":{"version":3,"sources":["/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/src/components/pages/Manager/WorkAssignment/BtnAddWorkShiftAssigner/BtnAddWorkShiftAssigner.js"],"names":["React","UsergroupAddOutlined","Button","Modal","Tooltip","message","List","Avatar","Row","Col","Checkbox","withCookies","COOKIE_NAMES","API","PageBase","USER_ROLES","BtnAddWorkShiftAssigner","constructor","props","loadStaffs","res","fetch","Manager","StaffManagement","getListStaffs","method","headers","cookies","get","token","signal","abortController","json","status","users","data","setState","staffs","filter","u","role","MANAGER","type","error","errors","state","isVisible","assigners","isAllStaffsChecked","selectedWorkShift","componentDidMount","isWorkShiftAssigner","staff","assigner","workAssignments","find","wa","id","_id","setModalVisible","s","onOK","onCancel","onCheckStaff","e","staffID","checked","target","push","length","onCheckAllStaffs","map","render","console","log","isBtnOpenDisabled","width","avatar","fullname","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { UsergroupAddOutlined } from '@ant-design/icons';\nimport { Button, Modal, Tooltip, message, List, Avatar, Row, Col, Checkbox } from 'antd';\nimport './BtnAddWorkShiftAssigner.style.scss';\nimport { withCookies } from 'react-cookie';\nimport { COOKIE_NAMES } from '../../../../../constants/cookie-name.constant';\nimport { API } from '../../../../../constants/api.constant';\nimport PageBase from '../../../../utilities/PageBase/PageBase';\nimport USER_ROLES from '../../../../../constants/user-role.constant';\n\nclass BtnAddWorkShiftAssigner extends PageBase {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isVisible: false,\n      staffs: [],\n      assigners: [],\n      isAllStaffsChecked: false,\n      selectedWorkShift: {}\n    }\n  }\n\n  componentDidMount() {\n    this.loadStaffs();\n  }\n\n  loadStaffs = async () => {\n    const res = await (\n      await fetch(\n        API.Manager.StaffManagement.getListStaffs,\n        {\n          method: 'GET',\n          headers: {\n            'Content-type': 'application/json; charset=UTF-8',\n            'token': this.props.cookies.get(COOKIE_NAMES.token)\n          },\n          signal: this.abortController.signal\n        }\n      )\n    ).json();\n\n    if (res.status === 200) {\n      const { users } = res.data;\n      this.setState({ staffs: users.filter(u => u.role !== USER_ROLES.MANAGER.type) });\n    } else {\n      message.error(res.errors[0]);\n    }\n  }\n\n  isWorkShiftAssigner(selectedWorkShift, staff) {\n    const assigner = selectedWorkShift.workAssignments.find(wa => wa.assigner.id === staff._id);\n    return assigner;\n  }\n\n  setModalVisible(isVisible) {\n    if (isVisible) {\n      const { selectedWorkShift } = this.props;\n      this.setState({ selectedWorkShift });\n\n      let { staffs } = this.state;\n      staffs = staffs.filter(s => !this.isWorkShiftAssigner(selectedWorkShift, s));\n      this.setState({ staffs });\n    }\n\n    this.setState({ isVisible });\n  }\n\n  onOK() {\n\n  }\n\n  onCancel() {\n    this.setModalVisible(false);\n  }\n\n  onCheckStaff(e, staffID) {\n    const { checked } = e.target;\n    let { assigners, staffs } = this.state;\n\n    if (checked) {\n      assigners.push(staffID);\n\n      if (assigners.length === staffs.length) {\n        this.setState({ isAllStaffsChecked: true })\n      }\n    } else {\n      assigners = assigners.filter(id => id !== staffID);\n\n      if (assigners.length < staffs.length) {\n        this.setState({ isAllStaffsChecked: false })\n      }\n    }\n\n    this.setState({ assigners });\n  }\n\n  onCheckAllStaffs(e) {\n    const { checked } = e.target;\n    const { isAllStaffsChecked, staffs } = this.state;\n    this.setState({ isAllStaffsChecked: !isAllStaffsChecked });\n\n    let { assigners } = this.state;\n    if (checked) {\n      assigners = staffs.map(staff => staff._id);\n    } else {\n      assigners = [];\n    }\n\n    this.setState({ assigners });\n  }\n\n  render() {\n    let { staffs, assigners } = this.state;\n\n    console.log(staffs);\n\n    return (\n      <div className=\"add-work-shift-assigner\">\n        <Tooltip placement=\"bottom\" title=\"Thêm nhân viên\">\n          <Button\n            onClick={() => this.setModalVisible(true)}\n            className=\"add-work-shift-assigner__btn-open\"\n            type=\"link\"\n            icon={<UsergroupAddOutlined />}\n            disabled={this.props.isBtnOpenDisabled}\n          />\n        </Tooltip>\n        <Modal\n          title=\"Phân công nhân viên\"\n          centered\n          visible={this.state.isVisible}\n          onOk={() => this.onOK()}\n          onCancel={() => this.onCancel()}\n          okText=\"Phân công\"\n          cancelText=\"Hủy bỏ\"\n        >\n\n          <div className=\"add-work-shift-assigner__list-staffs\">\n            <Row className=\"add-work-shift-assigner__list-staffs__header\">\n              <Col span={21} className=\"add-work-shift-assigner__list-staffs__header__col-1\">\n                <span>Nhân viên chưa được phân công</span>\n              </Col>\n              <Col span={3} className=\"add-work-shift-assigner__list-staffs__header__col-2\">\n                <Checkbox onChange={e => this.onCheckAllStaffs(e)} checked={this.state.isAllStaffsChecked} />\n              </Col>\n            </Row>\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={staffs}\n              renderItem={staff => (\n                <List.Item>\n                  <Row style={{ width: '100%' }}>\n                    <Col span={21}>\n                      <List.Item.Meta\n                        avatar={<Avatar src={staff.avatar} />}\n                        title={staff.fullname}\n                        description={USER_ROLES[staff.role].name}\n                      />\n                    </Col>\n                    <Col span={3} className=\"add-work-shift-assigner__list-staffs__checkbox-wrapper\">\n                      <Checkbox\n                        onChange={e => this.onCheckStaff(e, staff._id)}\n                        checked={assigners.find(id => id === staff._id)} />\n                    </Col>\n                  </Row>\n                </List.Item>\n              )}\n            />\n          </div>\n\n        </Modal>\n      </div>\n    )\n  }\n}\nexport default withCookies(BtnAddWorkShiftAssigner);"]},"metadata":{},"sourceType":"module"}