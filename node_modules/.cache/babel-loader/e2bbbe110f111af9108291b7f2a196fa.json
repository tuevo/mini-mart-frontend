{"ast":null,"code":"/**\n* JSONfn - javascript (both node.js and browser) plugin to stringify,\n*          parse and clone objects with Functions, Regexp and Date.\n*\n* Version - 1.1.0\n* Copyright (c) Vadim Kiryukhin\n* vkiryukhin @ gmail.com\n* http://www.eslinstructor.net/jsonfn/\n*\n* Licensed under the MIT license ( http://www.opensource.org/licenses/mit-license.php )\n*\n*   USAGE:\n*     browser:\n*         JSONfn.stringify(obj);\n*         JSONfn.parse(str[, date2obj]);\n*         JSONfn.clone(obj[, date2obj]);\n*\n*     nodejs:\n*       var JSONfn = require('path/to/json-fn');\n*       JSONfn.stringify(obj);\n*       JSONfn.parse(str[, date2obj]);\n*       JSONfn.clone(obj[, date2obj]);\n*\n*\n*     @obj      -  Object;\n*     @str      -  String, which is returned by JSONfn.stringify() function;\n*     @date2obj - Boolean (optional); if true, date string in ISO8061 format\n*                 is converted into a Date object; otherwise, it is left as a String.\n*/\n(function (exports) {\n  \"use strict\";\n\n  exports.stringify = function (obj) {\n    return JSON.stringify(obj, function (key, value) {\n      var fnBody;\n\n      if (value instanceof Function || typeof value == 'function') {\n        fnBody = value.toString();\n\n        if (fnBody.length < 8 || fnBody.substring(0, 8) !== 'function') {\n          //this is ES6 Arrow Function\n          return '_NuFrRa_' + fnBody;\n        }\n\n        return fnBody;\n      }\n\n      if (value instanceof RegExp) {\n        return '_PxEgEr_' + value;\n      }\n\n      return value;\n    });\n  };\n\n  exports.parse = function (str, date2obj) {\n    var iso8061 = date2obj ? /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/ : false;\n    return JSON.parse(str, function (key, value) {\n      var prefix;\n\n      if (typeof value != 'string') {\n        return value;\n      }\n\n      if (value.length < 8) {\n        return value;\n      }\n\n      prefix = value.substring(0, 8);\n\n      if (iso8061 && value.match(iso8061)) {\n        return new Date(value);\n      }\n\n      if (prefix === 'function') {\n        return eval('(' + value + ')');\n      }\n\n      if (prefix === '_PxEgEr_') {\n        return eval(value.slice(8));\n      }\n\n      if (prefix === '_NuFrRa_') {\n        return eval(value.slice(8));\n      }\n\n      return value;\n    });\n  };\n\n  exports.clone = function (obj, date2obj) {\n    return exports.parse(exports.stringify(obj), date2obj);\n  };\n})(typeof exports === 'undefined' ? window.JSONfn = {} : exports);","map":{"version":3,"sources":["/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/node_modules/json-fn/jsonfn.js"],"names":["exports","stringify","obj","JSON","key","value","fnBody","Function","toString","length","substring","RegExp","parse","str","date2obj","iso8061","prefix","match","Date","eval","slice","clone","window","JSONfn"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BC,WAAUA,OAAV,EAAmB;AACpB;;AAEEA,EAAAA,OAAO,CAACC,SAAR,GAAoB,UAAUC,GAAV,EAAe;AAEjC,WAAOC,IAAI,CAACF,SAAL,CAAeC,GAAf,EAAoB,UAAUE,GAAV,EAAeC,KAAf,EAAsB;AAC/C,UAAIC,MAAJ;;AACA,UAAID,KAAK,YAAYE,QAAjB,IAA6B,OAAOF,KAAP,IAAgB,UAAjD,EAA6D;AAG3DC,QAAAA,MAAM,GAAGD,KAAK,CAACG,QAAN,EAAT;;AAEA,YAAIF,MAAM,CAACG,MAAP,GAAgB,CAAhB,IAAqBH,MAAM,CAACI,SAAP,CAAiB,CAAjB,EAAoB,CAApB,MAA2B,UAApD,EAAgE;AAAE;AAChE,iBAAO,aAAaJ,MAApB;AACD;;AACD,eAAOA,MAAP;AACD;;AACD,UAAID,KAAK,YAAYM,MAArB,EAA6B;AAC3B,eAAO,aAAaN,KAApB;AACD;;AACD,aAAOA,KAAP;AACD,KAhBM,CAAP;AAiBD,GAnBD;;AAqBAL,EAAAA,OAAO,CAACY,KAAR,GAAgB,UAAUC,GAAV,EAAeC,QAAf,EAAyB;AAEvC,QAAIC,OAAO,GAAGD,QAAQ,GAAG,8DAAH,GAAoE,KAA1F;AAEA,WAAOX,IAAI,CAACS,KAAL,CAAWC,GAAX,EAAgB,UAAUT,GAAV,EAAeC,KAAf,EAAsB;AAC3C,UAAIW,MAAJ;;AAEA,UAAI,OAAOX,KAAP,IAAgB,QAApB,EAA8B;AAC5B,eAAOA,KAAP;AACD;;AACD,UAAIA,KAAK,CAACI,MAAN,GAAe,CAAnB,EAAsB;AACpB,eAAOJ,KAAP;AACD;;AAEDW,MAAAA,MAAM,GAAGX,KAAK,CAACK,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAAT;;AAEA,UAAIK,OAAO,IAAIV,KAAK,CAACY,KAAN,CAAYF,OAAZ,CAAf,EAAqC;AACnC,eAAO,IAAIG,IAAJ,CAASb,KAAT,CAAP;AACD;;AACD,UAAIW,MAAM,KAAK,UAAf,EAA2B;AACzB,eAAOG,IAAI,CAAC,MAAMd,KAAN,GAAc,GAAf,CAAX;AACD;;AACD,UAAIW,MAAM,KAAK,UAAf,EAA2B;AACzB,eAAOG,IAAI,CAACd,KAAK,CAACe,KAAN,CAAY,CAAZ,CAAD,CAAX;AACD;;AACD,UAAIJ,MAAM,KAAK,UAAf,EAA2B;AACzB,eAAOG,IAAI,CAACd,KAAK,CAACe,KAAN,CAAY,CAAZ,CAAD,CAAX;AACD;;AAED,aAAOf,KAAP;AACD,KA1BM,CAAP;AA2BD,GA/BD;;AAiCAL,EAAAA,OAAO,CAACqB,KAAR,GAAgB,UAAUnB,GAAV,EAAeY,QAAf,EAAyB;AACvC,WAAOd,OAAO,CAACY,KAAR,CAAcZ,OAAO,CAACC,SAAR,CAAkBC,GAAlB,CAAd,EAAsCY,QAAtC,CAAP;AACD,GAFD;AAID,CA7DA,EA6DC,OAAOd,OAAP,KAAmB,WAAnB,GAAkCsB,MAAM,CAACC,MAAP,GAAgB,EAAlD,GAAwDvB,OA7DzD,CAAD","sourcesContent":["/**\n* JSONfn - javascript (both node.js and browser) plugin to stringify,\n*          parse and clone objects with Functions, Regexp and Date.\n*\n* Version - 1.1.0\n* Copyright (c) Vadim Kiryukhin\n* vkiryukhin @ gmail.com\n* http://www.eslinstructor.net/jsonfn/\n*\n* Licensed under the MIT license ( http://www.opensource.org/licenses/mit-license.php )\n*\n*   USAGE:\n*     browser:\n*         JSONfn.stringify(obj);\n*         JSONfn.parse(str[, date2obj]);\n*         JSONfn.clone(obj[, date2obj]);\n*\n*     nodejs:\n*       var JSONfn = require('path/to/json-fn');\n*       JSONfn.stringify(obj);\n*       JSONfn.parse(str[, date2obj]);\n*       JSONfn.clone(obj[, date2obj]);\n*\n*\n*     @obj      -  Object;\n*     @str      -  String, which is returned by JSONfn.stringify() function;\n*     @date2obj - Boolean (optional); if true, date string in ISO8061 format\n*                 is converted into a Date object; otherwise, it is left as a String.\n*/\n\n(function (exports) {\n\"use strict\";\n\n  exports.stringify = function (obj) {\n\n    return JSON.stringify(obj, function (key, value) {\n      var fnBody;\n      if (value instanceof Function || typeof value == 'function') {\n\n\n        fnBody = value.toString();\n\n        if (fnBody.length < 8 || fnBody.substring(0, 8) !== 'function') { //this is ES6 Arrow Function\n          return '_NuFrRa_' + fnBody;\n        }\n        return fnBody;\n      }\n      if (value instanceof RegExp) {\n        return '_PxEgEr_' + value;\n      }\n      return value;\n    });\n  };\n\n  exports.parse = function (str, date2obj) {\n\n    var iso8061 = date2obj ? /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/ : false;\n\n    return JSON.parse(str, function (key, value) {\n      var prefix;\n\n      if (typeof value != 'string') {\n        return value;\n      }\n      if (value.length < 8) {\n        return value;\n      }\n\n      prefix = value.substring(0, 8);\n\n      if (iso8061 && value.match(iso8061)) {\n        return new Date(value);\n      }\n      if (prefix === 'function') {\n        return eval('(' + value + ')');\n      }\n      if (prefix === '_PxEgEr_') {\n        return eval(value.slice(8));\n      }\n      if (prefix === '_NuFrRa_') {\n        return eval(value.slice(8));\n      }\n\n      return value;\n    });\n  };\n\n  exports.clone = function (obj, date2obj) {\n    return exports.parse(exports.stringify(obj), date2obj);\n  };\n\n}(typeof exports === 'undefined' ? (window.JSONfn = {}) : exports));\n\n\n"]},"metadata":{},"sourceType":"script"}