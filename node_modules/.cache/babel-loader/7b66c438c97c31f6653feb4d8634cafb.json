{"ast":null,"code":"var _jsxFileName = \"/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/src/components/utilities/Map/Map.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker, Autocomplete } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyA06FTC8K20nDQGWzmHbnVwzeesCorWP6s\");\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n    * Get the current address from the default map position and set those values in the state\n    */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n    *\n    * @param nextProps\n    * @param nextState\n    * @return {boolean}\n    */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n    * Get the city and set the city input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), \"i\")));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"City\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Area\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"State\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Address\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }))), React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/src/components/utilities/Map/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","Map","Component","constructor","props","getCity","addressArray","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","address","mapPosition","lat","center","lng","markerPosition","componentDidMount","fromLatLng","then","response","results","formatted_address","address_components","console","log","error","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","onPlaceSelected","map","undefined"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,YAAnC,EAAiDC,UAAjD,EAA6DC,MAA7D,EAAqEC,YAArE,QAAyF,mBAAzF;AACA,OAAOC,OAAP,MAAoB,eAApB;AACAA,OAAO,CAACC,SAAR,CAAkB,yCAAlB;AACAD,OAAO,CAACE,WAAR;;AACA,MAAMC,GAAN,SAAkBV,KAAK,CAACW,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAqEnBC,OArEmB,GAqERC,YAAD,IAAkB;AAC1B,UAAIC,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,YAAIF,YAAY,CAACE,CAAD,CAAZ,CAAgBE,KAAhB,CAAsB,CAAtB,KAA4B,kCAAkCJ,YAAY,CAACE,CAAD,CAAZ,CAAgBE,KAAhB,CAAsB,CAAtB,CAAlE,EAA4F;AAC1FH,UAAAA,IAAI,GAAGD,YAAY,CAACE,CAAD,CAAZ,CAAgBG,SAAvB;AACA,iBAAOJ,IAAP;AACD;AACF;AACF,KA7EkB;;AAAA,SAoFnBK,OApFmB,GAoFRN,YAAD,IAAkB;AAC1B,UAAIO,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,YAAIF,YAAY,CAACE,CAAD,CAAZ,CAAgBE,KAAhB,CAAsB,CAAtB,CAAJ,EAA8B;AAC5B,eAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,YAAY,CAACE,CAAD,CAAZ,CAAgBE,KAAhB,CAAsBD,MAA1C,EAAkDK,CAAC,EAAnD,EAAuD;AACrD,gBAAI,0BAA0BR,YAAY,CAACE,CAAD,CAAZ,CAAgBE,KAAhB,CAAsBI,CAAtB,CAA1B,IAAsD,eAAeR,YAAY,CAACE,CAAD,CAAZ,CAAgBE,KAAhB,CAAsBI,CAAtB,CAAzE,EAAmG;AACjGD,cAAAA,IAAI,GAAGP,YAAY,CAACE,CAAD,CAAZ,CAAgBG,SAAvB;AACA,qBAAOE,IAAP;AACD;AACF;AACF;AACF;AACF,KAhGkB;;AAAA,SAuGnBE,QAvGmB,GAuGPT,YAAD,IAAkB;AAC3B,UAAIU,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,aAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,cAAIF,YAAY,CAACE,CAAD,CAAZ,CAAgBE,KAAhB,CAAsB,CAAtB,KAA4B,kCAAkCJ,YAAY,CAACE,CAAD,CAAZ,CAAgBE,KAAhB,CAAsB,CAAtB,CAAlE,EAA4F;AAC1FM,YAAAA,KAAK,GAAGV,YAAY,CAACE,CAAD,CAAZ,CAAgBG,SAAxB;AACA,mBAAOK,KAAP;AACD;AACF;AACF;AACF,KAjHkB;;AAAA,SAsHnBC,QAtHmB,GAsHPC,KAAD,IAAW;AACpB,WAAKC,QAAL,CAAc;AAAE,SAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;AAApC,OAAd;AACD,KAxHkB;;AAAA,SA8HnBC,iBA9HmB,GA8HEL,KAAD,IAAW,CAC9B,CA/HkB;;AAEjB,SAAKF,KAAL,GAAa;AACXQ,MAAAA,OAAO,EAAE,EADE;AAEXjB,MAAAA,IAAI,EAAE,EAFK;AAGXM,MAAAA,IAAI,EAAE,EAHK;AAIXG,MAAAA,KAAK,EAAE,EAJI;AAKXS,MAAAA,WAAW,EAAE;AACXC,QAAAA,GAAG,EAAE,KAAKtB,KAAL,CAAWuB,MAAX,CAAkBD,GADZ;AAEXE,QAAAA,GAAG,EAAE,KAAKxB,KAAL,CAAWuB,MAAX,CAAkBC;AAFZ,OALF;AASXC,MAAAA,cAAc,EAAE;AACdH,QAAAA,GAAG,EAAE,KAAKtB,KAAL,CAAWuB,MAAX,CAAkBD,GADT;AAEdE,QAAAA,GAAG,EAAE,KAAKxB,KAAL,CAAWuB,MAAX,CAAkBC;AAFT;AATL,KAAb;AAcD;AACD;;;;;AAGAE,EAAAA,iBAAiB,GAAG;AAClBhC,IAAAA,OAAO,CAACiC,UAAR,CAAmB,KAAKf,KAAL,CAAWS,WAAX,CAAuBC,GAA1C,EAA+C,KAAKV,KAAL,CAAWS,WAAX,CAAuBG,GAAtE,EAA2EI,IAA3E,CACEC,QAAQ,IAAI;AACV,YAAMT,OAAO,GAAGS,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAoBC,iBAApC;AAAA,YACE7B,YAAY,GAAG2B,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAoBE,kBADrC;AAAA,YAEE7B,IAAI,GAAG,KAAKF,OAAL,CAAaC,YAAb,CAFT;AAAA,YAGEO,IAAI,GAAG,KAAKD,OAAL,CAAaN,YAAb,CAHT;AAAA,YAIEU,KAAK,GAAG,KAAKD,QAAL,CAAcT,YAAd,CAJV;AAMA+B,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB/B,IAApB,EAA0BM,IAA1B,EAAgCG,KAAhC;AAEA,WAAKG,QAAL,CAAc;AACZK,QAAAA,OAAO,EAAGA,OAAD,GAAYA,OAAZ,GAAsB,EADnB;AAEZX,QAAAA,IAAI,EAAGA,IAAD,GAASA,IAAT,GAAgB,EAFV;AAGZN,QAAAA,IAAI,EAAGA,IAAD,GAASA,IAAT,GAAgB,EAHV;AAIZS,QAAAA,KAAK,EAAGA,KAAD,GAAUA,KAAV,GAAkB;AAJb,OAAd;AAMD,KAhBH,EAiBEuB,KAAK,IAAI;AACPF,MAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACD,KAnBH;AAqBD;;AACD;;;;;;;AAOAC,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1C,QACE,KAAK1B,KAAL,CAAWa,cAAX,CAA0BH,GAA1B,KAAkC,KAAKtB,KAAL,CAAWuB,MAAX,CAAkBD,GAApD,IACA,KAAKV,KAAL,CAAWQ,OAAX,KAAuBkB,SAAS,CAAClB,OADjC,IAEA,KAAKR,KAAL,CAAWT,IAAX,KAAoBmC,SAAS,CAACnC,IAF9B,IAGA,KAAKS,KAAL,CAAWH,IAAX,KAAoB6B,SAAS,CAAC7B,IAH9B,IAIA,KAAKG,KAAL,CAAWA,KAAX,KAAqB0B,SAAS,CAAC1B,KALjC,EAME;AACA,aAAO,IAAP;AACD,KARD,MAQO,IAAI,KAAKZ,KAAL,CAAWuB,MAAX,CAAkBD,GAAlB,KAA0Be,SAAS,CAACd,MAAV,CAAiBD,GAA/C,EAAoD;AACzD,aAAO,KAAP;AACD;AACF;AACD;;;;;;;;AAiEAiB,EAAAA,MAAM,GAAG;AACP,UAAMC,QAAQ,GAAGlD,YAAY,CAC3BF,aAAa,CACXY,KAAK,IACH,oBAAC,SAAD;AAAW,MAAA,MAAM,EAAE,KAAKA,KAAL,CAAWyC,MAA9B;AACE,MAAA,WAAW,EAAE,KAAKzC,KAAL,CAAW0C,IAD1B;AAEE,MAAA,aAAa,EAAE;AAAEpB,QAAAA,GAAG,EAAE,KAAKV,KAAL,CAAWS,WAAX,CAAuBC,GAA9B;AAAmCE,QAAAA,GAAG,EAAE,KAAKZ,KAAL,CAAWS,WAAX,CAAuBG;AAA/D,OAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE,oBAAC,YAAD;AACF,MAAA,KAAK,EAAE;AACNmB,QAAAA,KAAK,EAAE,MADD;AAENC,QAAAA,MAAM,EAAE,MAFF;AAGNC,QAAAA,WAAW,EAAE,MAHP;AAINC,QAAAA,SAAS,EAAE,KAJL;AAKNC,QAAAA,YAAY,EAAE;AALR,OADL;AAQF,MAAA,eAAe,EAAG,KAAKC,eARrB;AASF,MAAA,KAAK,EAAE,CAAC,WAAD,CATL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,MAFS,CADc,CAA7B;AAuBA,QAAIC,GAAJ;;AACA,QAAI,KAAKjD,KAAL,CAAWuB,MAAX,CAAkBD,GAAlB,KAA0B4B,SAA9B,EAAyC;AACvCD,MAAAA,GAAG,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,MAAxB;AAA+B,QAAA,SAAS,EAAC,cAAzC;AAAwD,QAAA,QAAQ,EAAE,KAAKpC,QAAvE;AAAiF,QAAA,QAAQ,EAAC,UAA1F;AAAqG,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWT,IAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,EAKE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,MAAxB;AAA+B,QAAA,SAAS,EAAC,cAAzC;AAAwD,QAAA,QAAQ,EAAE,KAAKU,QAAvE;AAAiF,QAAA,QAAQ,EAAC,UAA1F;AAAqG,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWH,IAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CALF,EASE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,SAAS,EAAC,cAA1C;AAAyD,QAAA,QAAQ,EAAE,KAAKI,QAAxE;AAAkF,QAAA,QAAQ,EAAC,UAA3F;AAAsG,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWA,KAAxH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CATF,EAaE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,SAAxB;AAAkC,QAAA,SAAS,EAAC,cAA5C;AAA2D,QAAA,QAAQ,EAAE,KAAKC,QAA1E;AAAoF,QAAA,QAAQ,EAAC,UAA7F;AAAwG,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWQ,OAA1H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CAbF,CADI,EAmBJ,oBAAC,QAAD;AACE,QAAA,YAAY,EAAC,sGADf;AAEE,QAAA,cAAc,EACZ;AAAK,UAAA,KAAK,EAAE;AAAEwB,YAAAA,MAAM,EAAG;AAAX,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHJ;AAKE,QAAA,gBAAgB,EACd;AAAK,UAAA,KAAK,EAAE;AAAEA,YAAAA,MAAM,EAAE,KAAK5C,KAAL,CAAW4C;AAArB,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UANJ;AAQE,QAAA,UAAU,EACR;AAAK,UAAA,KAAK,EAAE;AAAEA,YAAAA,MAAM,EAAG;AAAX,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAnBI,CAAN;AAgCD,KAjCD,MAiCO;AACLK,MAAAA,GAAG,GAAG;AAAK,QAAA,KAAK,EAAE;AAAEL,UAAAA,MAAM,EAAE,KAAK5C,KAAL,CAAW4C;AAArB,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAN;AACD;;AACD,WAAQK,GAAR;AACD;;AA/L+B;;AAiMlC,eAAepD,GAAf","sourcesContent":["import React from 'react'\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker, Autocomplete } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyA06FTC8K20nDQGWzmHbnVwzeesCorWP6s\");\nGeocode.enableDebug();\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    }\n  }\n  /**\n    * Get the current address from the default map position and set those values in the state\n    */\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(\n      response => {\n        const address = response.results[0].formatted_address,\n          addressArray = response.results[0].address_components,\n          city = this.getCity(addressArray),\n          area = this.getArea(addressArray),\n          state = this.getState(addressArray);\n\n        console.log('city', city, area, state);\n\n        this.setState({\n          address: (address) ? address : '',\n          area: (area) ? area : '',\n          city: (city) ? city : '',\n          state: (state) ? state : '',\n        })\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  };\n  /**\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n    *\n    * @param nextProps\n    * @param nextState\n    * @return {boolean}\n    */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.state.markerPosition.lat !== this.props.center.lat ||\n      this.state.address !== nextState.address ||\n      this.state.city !== nextState.city ||\n      this.state.area !== nextState.area ||\n      this.state.state !== nextState.state\n    ) {\n      return true\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false\n    }\n  }\n  /**\n    * Get the city and set the city input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n  getCity = (addressArray) => {\n    let city = '';\n    for (let i = 0; i < addressArray.length; i++) {\n      if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n        city = addressArray[i].long_name;\n        return city;\n      }\n    }\n  };\n  /**\n    * Get the area and set the area input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n  getArea = (addressArray) => {\n    let area = '';\n    for (let i = 0; i < addressArray.length; i++) {\n      if (addressArray[i].types[0]) {\n        for (let j = 0; j < addressArray[i].types.length; j++) {\n          if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n            area = addressArray[i].long_name;\n            return area;\n          }\n        }\n      }\n    }\n  };\n  /**\n    * Get the address and set the address input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n  getState = (addressArray) => {\n    let state = '';\n    for (let i = 0; i < addressArray.length; i++) {\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n          state = addressArray[i].long_name;\n          return state;\n        }\n      }\n    }\n  };\n  /**\n    * And function for city,state and address input\n    * @param event\n    */\n  onChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  /**\n    * This Event triggers when the marker window is closed\n    *\n    * @param event\n    */\n  onInfoWindowClose = (event) => {\n  };\n  render() {\n    const AsyncMap = withScriptjs(\n      withGoogleMap(\n        props => (\n          <GoogleMap google={this.props.google}\n            defaultZoom={this.props.zoom}\n            defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n          >\n            <Autocomplete\n          style={{\n           width: '100%',\n           height: '40px',\n           paddingLeft: '16px',\n           marginTop: '2px',\n           marginBottom: '100px'\n          }}\n          onPlaceSelected={ this.onPlaceSelected }\n          types={['(regions)']}\n         />i\n\n          </GoogleMap>\n        )\n      )\n    );\n    let map;\n    if (this.props.center.lat !== undefined) {\n      map = <div>\n        <div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">City</label>\n            <input type=\"text\" name=\"city\" className=\"form-control\" onChange={this.onChange} readOnly=\"readOnly\" value={this.state.city} />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">Area</label>\n            <input type=\"text\" name=\"area\" className=\"form-control\" onChange={this.onChange} readOnly=\"readOnly\" value={this.state.area} />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">State</label>\n            <input type=\"text\" name=\"state\" className=\"form-control\" onChange={this.onChange} readOnly=\"readOnly\" value={this.state.state} />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">Address</label>\n            <input type=\"text\" name=\"address\" className=\"form-control\" onChange={this.onChange} readOnly=\"readOnly\" value={this.state.address} />\n          </div>\n        </div>\n        <AsyncMap\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\"\n          loadingElement={\n            <div style={{ height: `100%` }} />\n          }\n          containerElement={\n            <div style={{ height: this.props.height }} />\n          }\n          mapElement={\n            <div style={{ height: `100%` }} />\n          }\n        />\n      </div>\n    } else {\n      map = <div style={{ height: this.props.height }} />\n    }\n    return (map)\n  }\n}\nexport default Map"]},"metadata":{},"sourceType":"module"}