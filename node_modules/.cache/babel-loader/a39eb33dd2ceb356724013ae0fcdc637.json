{"ast":null,"code":"var _jsxFileName = \"/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/src/components/pages/Manager/WorkAssignment/BtnAddWorkSchedule/BtnAddWorkSchedule.js\";\nimport React, { Component } from 'react';\nimport { Modal, Button, Calendar, message } from 'antd';\nimport { CalendarFilled } from '@ant-design/icons';\nimport './BtnAddWorkSchedule.style.scss';\nimport MONTHS from '../../../../../constants/months.constant';\nimport { API } from '../../../../../constants/api.constant';\nimport { withCookies } from 'react-cookie';\nimport { COOKIE_NAMES } from '../../../../../constants/cookie-name.constant';\nimport PageBase from '../../../../utilities/PageBase/PageBase';\n\nclass BtnAddWorkSchedule extends PageBase {\n  constructor(props) {\n    super(props);\n\n    this.onOK = async () => {\n      const {\n        selectedDate\n      } = this.state;\n\n      if (!selectedDate) {\n        message.error('Bạn chưa chọn tháng làm việc');\n        return;\n      }\n\n      const month = selectedDate.getMonth() + 1;\n      const year = selectedDate.getFullYear();\n      const res = await (await fetch(API.Manager.WorkSchedule.addWorkSchedule, {\n        method: 'POST',\n        body: JSON.stringify({\n          month,\n          year\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n          'token': this.props.cookies.get(COOKIE_NAMES.token)\n        }\n      })).json();\n\n      if (res.status === 200) {\n        this.setState({\n          selectedDate: null\n        });\n        this.props.reloadWorkSchedules(year);\n        this.setModalVisible(false);\n        message.success(res.messages[0]);\n      } else {\n        message.error(res.errors[0]);\n      }\n    };\n\n    this.state = {\n      isVisible: false,\n      selectedDate: null\n    };\n  }\n\n  setModalVisible(isVisible) {\n    this.setState({\n      isVisible\n    });\n  }\n\n  onCancel() {\n    this.setModalVisible(false);\n  }\n\n  handleSelectMonth(e) {\n    const selectedDate = new Date(e);\n    this.setState({\n      selectedDate\n    });\n  }\n\n  monthFullCellRender(date) {\n    const {\n      selectedDate\n    } = this.state;\n\n    const _date = new Date(date);\n\n    const monthIndex = _date.getMonth();\n\n    return React.createElement(\"span\", {\n      className: `\n        add-work-schedule-dialog__calendar__month \n        ${selectedDate ? _date.getTime() === selectedDate.getTime() ? 'add-work-schedule-dialog__calendar__month--selected' : '' : ''}\n      `,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, MONTHS[monthIndex]);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"add-work-schedule-dialog\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"add-work-schedule-dialog__btn-open\",\n      icon: React.createElement(CalendarFilled, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }),\n      type: \"primary\",\n      onClick: () => this.setModalVisible(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Th\\xEAm l\\u1ECBch l\\xE0m vi\\u1EC7c\"), React.createElement(Modal, {\n      title: \"Th\\xEAm l\\u1ECBch l\\xE0m vi\\u1EC7c\",\n      centered: true,\n      visible: this.state.isVisible,\n      onOk: () => this.onOK(),\n      onCancel: () => this.onCancel(),\n      okText: \"Th\\xEAm\",\n      cancelText: \"H\\u1EE7y b\\u1ECF\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"add-work-schedule-dialog__calendar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Calendar, {\n      mode: \"year\",\n      monthFullCellRender: date => this.monthFullCellRender(date),\n      fullscreen: false,\n      onPanelChange: e => this.handleSelectMonth(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default withCookies(BtnAddWorkSchedule);","map":{"version":3,"sources":["/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/src/components/pages/Manager/WorkAssignment/BtnAddWorkSchedule/BtnAddWorkSchedule.js"],"names":["React","Component","Modal","Button","Calendar","message","CalendarFilled","MONTHS","API","withCookies","COOKIE_NAMES","PageBase","BtnAddWorkSchedule","constructor","props","onOK","selectedDate","state","error","month","getMonth","year","getFullYear","res","fetch","Manager","WorkSchedule","addWorkSchedule","method","body","JSON","stringify","headers","cookies","get","token","json","status","setState","reloadWorkSchedules","setModalVisible","success","messages","errors","isVisible","onCancel","handleSelectMonth","e","Date","monthFullCellRender","date","_date","monthIndex","getTime","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,OAAlC,QAAiD,MAAjD;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,OAAO,iCAAP;AACA,OAAOC,MAAP,MAAmB,0CAAnB;AACA,SAASC,GAAT,QAAoB,uCAApB;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,YAAT,QAA6B,+CAA7B;AACA,OAAOC,QAAP,MAAqB,yCAArB;;AAEA,MAAMC,kBAAN,SAAiCD,QAAjC,CAA0C;AACxCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAanBC,IAbmB,GAaZ,YAAY;AACjB,YAAM;AAAEC,QAAAA;AAAF,UAAmB,KAAKC,KAA9B;;AACA,UAAI,CAACD,YAAL,EAAmB;AACjBX,QAAAA,OAAO,CAACa,KAAR,CAAc,8BAAd;AACA;AACD;;AAED,YAAMC,KAAK,GAAGH,YAAY,CAACI,QAAb,KAA0B,CAAxC;AACA,YAAMC,IAAI,GAAGL,YAAY,CAACM,WAAb,EAAb;AACA,YAAMC,GAAG,GAAG,MAAM,CAChB,MAAMC,KAAK,CACThB,GAAG,CAACiB,OAAJ,CAAYC,YAAZ,CAAyBC,eADhB,EAET;AACEC,QAAAA,MAAM,EAAE,MADV;AAEEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEZ,UAAAA,KAAF;AAASE,UAAAA;AAAT,SAAf,CAFR;AAGEW,QAAAA,OAAO,EAAE;AACP,0BAAgB,iCADT;AAEP,mBAAS,KAAKlB,KAAL,CAAWmB,OAAX,CAAmBC,GAAnB,CAAuBxB,YAAY,CAACyB,KAApC;AAFF;AAHX,OAFS,CADK,EAYhBC,IAZgB,EAAlB;;AAcA,UAAIb,GAAG,CAACc,MAAJ,KAAe,GAAnB,EAAwB;AACtB,aAAKC,QAAL,CAAc;AAAEtB,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACA,aAAKF,KAAL,CAAWyB,mBAAX,CAA+BlB,IAA/B;AACA,aAAKmB,eAAL,CAAqB,KAArB;AACAnC,QAAAA,OAAO,CAACoC,OAAR,CAAgBlB,GAAG,CAACmB,QAAJ,CAAa,CAAb,CAAhB;AACD,OALD,MAKO;AACLrC,QAAAA,OAAO,CAACa,KAAR,CAAcK,GAAG,CAACoB,MAAJ,CAAW,CAAX,CAAd;AACD;AACF,KA5CkB;;AAGjB,SAAK1B,KAAL,GAAa;AACX2B,MAAAA,SAAS,EAAE,KADA;AAEX5B,MAAAA,YAAY,EAAE;AAFH,KAAb;AAID;;AAEDwB,EAAAA,eAAe,CAACI,SAAD,EAAY;AACzB,SAAKN,QAAL,CAAc;AAAEM,MAAAA;AAAF,KAAd;AACD;;AAmCDC,EAAAA,QAAQ,GAAG;AACT,SAAKL,eAAL,CAAqB,KAArB;AACD;;AAEDM,EAAAA,iBAAiB,CAACC,CAAD,EAAI;AACnB,UAAM/B,YAAY,GAAG,IAAIgC,IAAJ,CAASD,CAAT,CAArB;AACA,SAAKT,QAAL,CAAc;AAAEtB,MAAAA;AAAF,KAAd;AACD;;AAEDiC,EAAAA,mBAAmB,CAACC,IAAD,EAAO;AACxB,UAAM;AAAElC,MAAAA;AAAF,QAAmB,KAAKC,KAA9B;;AACA,UAAMkC,KAAK,GAAG,IAAIH,IAAJ,CAASE,IAAT,CAAd;;AACA,UAAME,UAAU,GAAGD,KAAK,CAAC/B,QAAN,EAAnB;;AACA,WACE;AAAM,MAAA,SAAS,EAAG;;UAEdJ,YAAY,GAAGmC,KAAK,CAACE,OAAN,OAAoBrC,YAAY,CAACqC,OAAb,EAApB,GAA6C,qDAA7C,GAAqG,EAAxG,GAA6G,EAAG;OAFhI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIG9C,MAAM,CAAC6C,UAAD,CAJT,CADF;AAQD;;AAEDE,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,SAAS,EAAC,oCADZ;AAEE,MAAA,IAAI,EAAE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFR;AAGE,MAAA,IAAI,EAAC,SAHP;AAIE,MAAA,OAAO,EAAE,MAAM,KAAKd,eAAL,CAAqB,IAArB,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADF,EAQE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAC,oCADR;AAEE,MAAA,QAAQ,MAFV;AAGE,MAAA,OAAO,EAAE,KAAKvB,KAAL,CAAW2B,SAHtB;AAIE,MAAA,IAAI,EAAE,MAAM,KAAK7B,IAAL,EAJd;AAKE,MAAA,QAAQ,EAAE,MAAM,KAAK8B,QAAL,EALlB;AAME,MAAA,MAAM,EAAC,SANT;AAOE,MAAA,UAAU,EAAC,kBAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUE;AAAK,MAAA,SAAS,EAAC,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,mBAAmB,EAAEK,IAAI,IAAI,KAAKD,mBAAL,CAAyBC,IAAzB,CAF/B;AAGE,MAAA,UAAU,EAAE,KAHd;AAIE,MAAA,aAAa,EAAEH,CAAC,IAAI,KAAKD,iBAAL,CAAuBC,CAAvB,CAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,CARF,CADF;AA8BD;;AArGuC;;AAuG1C,eAAetC,WAAW,CAACG,kBAAD,CAA1B","sourcesContent":["import React, { Component } from 'react';\nimport { Modal, Button, Calendar, message } from 'antd';\nimport { CalendarFilled } from '@ant-design/icons';\nimport './BtnAddWorkSchedule.style.scss';\nimport MONTHS from '../../../../../constants/months.constant';\nimport { API } from '../../../../../constants/api.constant';\nimport { withCookies } from 'react-cookie';\nimport { COOKIE_NAMES } from '../../../../../constants/cookie-name.constant';\nimport PageBase from '../../../../utilities/PageBase/PageBase';\n\nclass BtnAddWorkSchedule extends PageBase {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isVisible: false,\n      selectedDate: null\n    }\n  }\n\n  setModalVisible(isVisible) {\n    this.setState({ isVisible });\n  }\n\n  onOK = async () => {\n    const { selectedDate } = this.state;\n    if (!selectedDate) {\n      message.error('Bạn chưa chọn tháng làm việc');\n      return;\n    }\n\n    const month = selectedDate.getMonth() + 1;\n    const year = selectedDate.getFullYear();\n    const res = await (\n      await fetch(\n        API.Manager.WorkSchedule.addWorkSchedule,\n        {\n          method: 'POST',\n          body: JSON.stringify({ month, year }),\n          headers: {\n            'Content-type': 'application/json; charset=UTF-8',\n            'token': this.props.cookies.get(COOKIE_NAMES.token)\n          }\n        }\n      )\n    ).json();\n\n    if (res.status === 200) {\n      this.setState({ selectedDate: null });\n      this.props.reloadWorkSchedules(year);\n      this.setModalVisible(false);\n      message.success(res.messages[0]);\n    } else {\n      message.error(res.errors[0]);\n    }\n  }\n\n  onCancel() {\n    this.setModalVisible(false);\n  }\n\n  handleSelectMonth(e) {\n    const selectedDate = new Date(e);\n    this.setState({ selectedDate });\n  }\n\n  monthFullCellRender(date) {\n    const { selectedDate } = this.state;\n    const _date = new Date(date);\n    const monthIndex = _date.getMonth();\n    return (\n      <span className={`\n        add-work-schedule-dialog__calendar__month \n        ${selectedDate ? _date.getTime() === selectedDate.getTime() ? 'add-work-schedule-dialog__calendar__month--selected' : '' : ''}\n      `}>\n        {MONTHS[monthIndex]}\n      </span>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"add-work-schedule-dialog\">\n        <Button\n          className=\"add-work-schedule-dialog__btn-open\"\n          icon={<CalendarFilled />}\n          type=\"primary\"\n          onClick={() => this.setModalVisible(true)} >\n          Thêm lịch làm việc\n        </Button>\n        <Modal\n          title=\"Thêm lịch làm việc\"\n          centered\n          visible={this.state.isVisible}\n          onOk={() => this.onOK()}\n          onCancel={() => this.onCancel()}\n          okText=\"Thêm\"\n          cancelText=\"Hủy bỏ\"\n        >\n\n          <div className=\"add-work-schedule-dialog__calendar\">\n            <Calendar\n              mode=\"year\"\n              monthFullCellRender={date => this.monthFullCellRender(date)}\n              fullscreen={false}\n              onPanelChange={e => this.handleSelectMonth(e)} />\n          </div>\n\n        </Modal>\n      </div>\n    )\n  }\n}\nexport default withCookies(BtnAddWorkSchedule);"]},"metadata":{},"sourceType":"module"}