{"ast":null,"code":"var _jsxFileName = \"/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/src/components/utilities/ImageUploader/ImageUploader.js\";\nimport React, { Component } from 'react';\nimport { Upload, message, Tooltip } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport './ImageUploader.style.scss';\nexport default class ImageUpload extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = info => {\n      if (info.file.status === 'uploading') {\n        this.setState({\n          loading: true\n        });\n        return;\n      }\n\n      if (info.file.status === 'done') {\n        // Get this url from response in real world.\n        this.getBase64(info.file.originFileObj, imageUrl => {\n          this.props.onFinish(imageUrl);\n          this.setState({\n            imageUrl,\n            loading: false\n          });\n        });\n      }\n    };\n\n    this.state = {\n      loading: false,\n      imageUrl: ''\n    };\n  }\n\n  getBase64(img, callback) {\n    const reader = new FileReader();\n    reader.addEventListener('load', () => callback(reader.result));\n    reader.readAsDataURL(img);\n  }\n\n  beforeUpload(file) {\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n\n    if (!isJpgOrPng) {\n      message.error('You can only upload JPG/PNG file!');\n    }\n\n    const isLt2M = file.size / 1024 / 1024 < 2;\n\n    if (!isLt2M) {\n      message.error('Image must smaller than 2MB!');\n    }\n\n    return isJpgOrPng && isLt2M;\n  }\n\n  render() {\n    let {\n      defaultImageUrl,\n      width,\n      height,\n      tooltipTitle,\n      tooltipPlacement\n    } = this.props;\n    const {\n      imageUrl\n    } = this.state;\n    const Image = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, defaultImageUrl ? React.createElement(\"img\", {\n      src: defaultImageUrl,\n      alt: \"default\",\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }) : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }));\n    const uploadButton = React.createElement(\"div\", {\n      style: {\n        width,\n        height\n      },\n      className: \"image-uploader__btn-upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, this.state.loading ? React.createElement(LoadingOutlined, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }) : Image);\n    return React.createElement(\"div\", {\n      className: \"image-uploader\",\n      style: {\n        width,\n        height\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Upload, {\n      name: \"avatar\",\n      listType: \"picture-card\",\n      showUploadList: false,\n      action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\n      beforeUpload: e => this.beforeUpload(e),\n      onChange: e => this.handleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, imageUrl ? React.createElement(Tooltip, {\n      title: tooltipTitle,\n      placement: tooltipPlacement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: imageUrl,\n      alt: \"uploaded\",\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })) : uploadButton));\n  }\n\n}","map":{"version":3,"sources":["/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/src/components/utilities/ImageUploader/ImageUploader.js"],"names":["React","Component","Upload","message","Tooltip","LoadingOutlined","ImageUpload","constructor","props","handleChange","info","file","status","setState","loading","getBase64","originFileObj","imageUrl","onFinish","state","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","beforeUpload","isJpgOrPng","type","error","isLt2M","size","render","defaultImageUrl","width","height","tooltipTitle","tooltipPlacement","Image","uploadButton","e"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Upload, message, Tooltip } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport './ImageUploader.style.scss'\n\nexport default class ImageUpload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      imageUrl: ''\n    }\n  }\n\n  getBase64(img, callback) {\n    const reader = new FileReader();\n    reader.addEventListener('load', () => callback(reader.result));\n    reader.readAsDataURL(img);\n  }\n\n  beforeUpload(file) {\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n    if (!isJpgOrPng) {\n      message.error('You can only upload JPG/PNG file!');\n    }\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n      message.error('Image must smaller than 2MB!');\n    }\n    return isJpgOrPng && isLt2M;\n  }\n\n  handleChange = info => {\n    if (info.file.status === 'uploading') {\n      this.setState({ loading: true });\n      return;\n    }\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      this.getBase64(info.file.originFileObj, imageUrl => {\n        this.props.onFinish(imageUrl);\n        this.setState({\n          imageUrl,\n          loading: false\n        });\n      });\n    }\n  };\n\n  render() {\n    let { defaultImageUrl, width, height, tooltipTitle, tooltipPlacement } = this.props;\n    const { imageUrl } = this.state;\n    const Image = (\n      <div>\n        {\n          defaultImageUrl ? (<img src={defaultImageUrl} alt=\"default\" style={{ width: '100%' }} />) : (<span></span>)\n        }\n      </div>\n    );\n\n    const uploadButton = (\n      <div style={{ width, height }} className=\"image-uploader__btn-upload\">\n        {\n          this.state.loading ? (\n            <LoadingOutlined />\n          ) : Image\n        }\n      </div>\n    );\n\n    return (\n      <div className=\"image-uploader\" style={{ width, height }}>\n        <Upload\n          name=\"avatar\"\n          listType=\"picture-card\"\n          showUploadList={false}\n          action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n          beforeUpload={e => this.beforeUpload(e)}\n          onChange={e => this.handleChange(e)}\n        >\n          {imageUrl ? (\n            <Tooltip title={tooltipTitle} placement={tooltipPlacement}>\n              <img src={imageUrl} alt=\"uploaded\" style={{ width: '100%' }} />\n            </Tooltip>\n          ) : uploadButton}\n        </Upload>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}