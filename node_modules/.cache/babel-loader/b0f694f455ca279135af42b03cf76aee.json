{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/* eslint no-console:0 */\n\n\nvar formatRegExp = /%[sdj%]/g;\n\nvar warning = function warning() {}; // don't print warning message when in production env or node runtime\n\n\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && typeof document !== 'undefined') {\n  warning = function warning(type, errors) {\n    if (typeof console !== 'undefined' && console.warn) {\n      if (errors.every(function (e) {\n        return typeof e === 'string';\n      })) {\n        console.warn(type, errors);\n      }\n    }\n  };\n}\n\nfunction convertFieldsError(errors) {\n  if (!errors || !errors.length) return null;\n  var fields = {};\n  errors.forEach(function (error) {\n    var field = error.field;\n    fields[field] = fields[field] || [];\n    fields[field].push(error);\n  });\n  return fields;\n}\n\nfunction format() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var i = 1;\n  var f = args[0];\n  var len = args.length;\n\n  if (typeof f === 'function') {\n    return f.apply(null, args.slice(1));\n  }\n\n  if (typeof f === 'string') {\n    var str = String(f).replace(formatRegExp, function (x) {\n      if (x === '%%') {\n        return '%';\n      }\n\n      if (i >= len) {\n        return x;\n      }\n\n      switch (x) {\n        case '%s':\n          return String(args[i++]);\n\n        case '%d':\n          return Number(args[i++]);\n\n        case '%j':\n          try {\n            return JSON.stringify(args[i++]);\n          } catch (_) {\n            return '[Circular]';\n          }\n\n          break;\n\n        default:\n          return x;\n      }\n    });\n\n    for (var arg = args[i]; i < len; arg = args[++i]) {\n      str += \" \" + arg;\n    }\n\n    return str;\n  }\n\n  return f;\n}\n\nfunction isNativeStringType(type) {\n  return type === 'string' || type === 'url' || type === 'hex' || type === 'email' || type === 'pattern';\n}\n\nfunction isEmptyValue(value, type) {\n  if (value === undefined || value === null) {\n    return true;\n  }\n\n  if (type === 'array' && Array.isArray(value) && !value.length) {\n    return true;\n  }\n\n  if (isNativeStringType(type) && typeof value === 'string' && !value) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction asyncParallelArray(arr, func, callback) {\n  var results = [];\n  var total = 0;\n  var arrLength = arr.length;\n\n  function count(errors) {\n    results.push.apply(results, errors);\n    total++;\n\n    if (total === arrLength) {\n      callback(results);\n    }\n  }\n\n  arr.forEach(function (a) {\n    func(a, count);\n  });\n}\n\nfunction asyncSerialArray(arr, func, callback) {\n  var index = 0;\n  var arrLength = arr.length;\n\n  function next(errors) {\n    if (errors && errors.length) {\n      callback(errors);\n      return;\n    }\n\n    var original = index;\n    index = index + 1;\n\n    if (original < arrLength) {\n      func(arr[original], next);\n    } else {\n      callback([]);\n    }\n  }\n\n  next([]);\n}\n\nfunction flattenObjArr(objArr) {\n  var ret = [];\n  Object.keys(objArr).forEach(function (k) {\n    ret.push.apply(ret, objArr[k]);\n  });\n  return ret;\n}\n\nfunction asyncMap(objArr, option, func, callback) {\n  if (option.first) {\n    var _pending = new Promise(function (resolve, reject) {\n      var next = function next(errors) {\n        callback(errors);\n        return errors.length ? reject({\n          errors: errors,\n          fields: convertFieldsError(errors)\n        }) : resolve();\n      };\n\n      var flattenArr = flattenObjArr(objArr);\n      asyncSerialArray(flattenArr, func, next);\n    });\n\n    _pending[\"catch\"](function (e) {\n      return e;\n    });\n\n    return _pending;\n  }\n\n  var firstFields = option.firstFields || [];\n\n  if (firstFields === true) {\n    firstFields = Object.keys(objArr);\n  }\n\n  var objArrKeys = Object.keys(objArr);\n  var objArrLength = objArrKeys.length;\n  var total = 0;\n  var results = [];\n  var pending = new Promise(function (resolve, reject) {\n    var next = function next(errors) {\n      results.push.apply(results, errors);\n      total++;\n\n      if (total === objArrLength) {\n        callback(results);\n        return results.length ? reject({\n          errors: results,\n          fields: convertFieldsError(results)\n        }) : resolve();\n      }\n    };\n\n    objArrKeys.forEach(function (key) {\n      var arr = objArr[key];\n\n      if (firstFields.indexOf(key) !== -1) {\n        asyncSerialArray(arr, func, next);\n      } else {\n        asyncParallelArray(arr, func, next);\n      }\n    });\n  });\n  pending[\"catch\"](function (e) {\n    return e;\n  });\n  return pending;\n}\n\nfunction complementError(rule) {\n  return function (oe) {\n    if (oe && oe.message) {\n      oe.field = oe.field || rule.fullField;\n      return oe;\n    }\n\n    return {\n      message: typeof oe === 'function' ? oe() : oe,\n      field: oe.field || rule.fullField\n    };\n  };\n}\n\nfunction deepMerge(target, source) {\n  if (source) {\n    for (var s in source) {\n      if (source.hasOwnProperty(s)) {\n        var value = source[s];\n\n        if (typeof value === 'object' && typeof target[s] === 'object') {\n          target[s] = _extends({}, target[s], {}, value);\n        } else {\n          target[s] = value;\n        }\n      }\n    }\n  }\n\n  return target;\n}\n/**\n *  Rule for validating required fields.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction required(rule, value, source, errors, options, type) {\n  if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type || rule.type))) {\n    errors.push(format(options.messages.required, rule.fullField));\n  }\n}\n/**\n *  Rule for validating whitespace.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction whitespace(rule, value, source, errors, options) {\n  if (/^\\s+$/.test(value) || value === '') {\n    errors.push(format(options.messages.whitespace, rule.fullField));\n  }\n}\n/* eslint max-len:0 */\n\n\nvar pattern = {\n  // http://emailregex.com/\n  email: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n  url: new RegExp(\"^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$\", 'i'),\n  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i\n};\nvar types = {\n  integer: function integer(value) {\n    return types.number(value) && parseInt(value, 10) === value;\n  },\n  \"float\": function float(value) {\n    return types.number(value) && !types.integer(value);\n  },\n  array: function array(value) {\n    return Array.isArray(value);\n  },\n  regexp: function regexp(value) {\n    if (value instanceof RegExp) {\n      return true;\n    }\n\n    try {\n      return !!new RegExp(value);\n    } catch (e) {\n      return false;\n    }\n  },\n  date: function date(value) {\n    return typeof value.getTime === 'function' && typeof value.getMonth === 'function' && typeof value.getYear === 'function';\n  },\n  number: function number(value) {\n    if (isNaN(value)) {\n      return false;\n    }\n\n    return typeof value === 'number';\n  },\n  object: function object(value) {\n    return typeof value === 'object' && !types.array(value);\n  },\n  method: function method(value) {\n    return typeof value === 'function';\n  },\n  email: function email(value) {\n    return typeof value === 'string' && !!value.match(pattern.email) && value.length < 255;\n  },\n  url: function url(value) {\n    return typeof value === 'string' && !!value.match(pattern.url);\n  },\n  hex: function hex(value) {\n    return typeof value === 'string' && !!value.match(pattern.hex);\n  }\n};\n/**\n *  Rule for validating the type of a value.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\nfunction type(rule, value, source, errors, options) {\n  if (rule.required && value === undefined) {\n    required(rule, value, source, errors, options);\n    return;\n  }\n\n  var custom = ['integer', 'float', 'array', 'regexp', 'object', 'method', 'email', 'number', 'date', 'url', 'hex'];\n  var ruleType = rule.type;\n\n  if (custom.indexOf(ruleType) > -1) {\n    if (!types[ruleType](value)) {\n      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));\n    } // straight typeof check\n\n  } else if (ruleType && typeof value !== rule.type) {\n    errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));\n  }\n}\n/**\n *  Rule for validating minimum and maximum allowed values.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction range(rule, value, source, errors, options) {\n  var len = typeof rule.len === 'number';\n  var min = typeof rule.min === 'number';\n  var max = typeof rule.max === 'number'; // 正则匹配码点范围从U+010000一直到U+10FFFF的文字（补充平面Supplementary Plane）\n\n  var spRegexp = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n  var val = value;\n  var key = null;\n  var num = typeof value === 'number';\n  var str = typeof value === 'string';\n  var arr = Array.isArray(value);\n\n  if (num) {\n    key = 'number';\n  } else if (str) {\n    key = 'string';\n  } else if (arr) {\n    key = 'array';\n  } // if the value is not of a supported type for range validation\n  // the validation rule rule should use the\n  // type property to also test for a particular type\n\n\n  if (!key) {\n    return false;\n  }\n\n  if (arr) {\n    val = value.length;\n  }\n\n  if (str) {\n    // 处理码点大于U+010000的文字length属性不准确的bug，如\"𠮷𠮷𠮷\".lenght !== 3\n    val = value.replace(spRegexp, '_').length;\n  }\n\n  if (len) {\n    if (val !== rule.len) {\n      errors.push(format(options.messages[key].len, rule.fullField, rule.len));\n    }\n  } else if (min && !max && val < rule.min) {\n    errors.push(format(options.messages[key].min, rule.fullField, rule.min));\n  } else if (max && !min && val > rule.max) {\n    errors.push(format(options.messages[key].max, rule.fullField, rule.max));\n  } else if (min && max && (val < rule.min || val > rule.max)) {\n    errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));\n  }\n}\n\nvar ENUM = 'enum';\n/**\n *  Rule for validating a value exists in an enumerable list.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\nfunction enumerable(rule, value, source, errors, options) {\n  rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];\n\n  if (rule[ENUM].indexOf(value) === -1) {\n    errors.push(format(options.messages[ENUM], rule.fullField, rule[ENUM].join(', ')));\n  }\n}\n/**\n *  Rule for validating a regular expression pattern.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction pattern$1(rule, value, source, errors, options) {\n  if (rule.pattern) {\n    if (rule.pattern instanceof RegExp) {\n      // if a RegExp instance is passed, reset `lastIndex` in case its `global`\n      // flag is accidentally set to `true`, which in a validation scenario\n      // is not necessary and the result might be misleading\n      rule.pattern.lastIndex = 0;\n\n      if (!rule.pattern.test(value)) {\n        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    } else if (typeof rule.pattern === 'string') {\n      var _pattern = new RegExp(rule.pattern);\n\n      if (!_pattern.test(value)) {\n        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    }\n  }\n}\n\nvar rules = {\n  required: required,\n  whitespace: whitespace,\n  type: type,\n  range: range,\n  \"enum\": enumerable,\n  pattern: pattern$1\n};\n/**\n *  Performs validation for string types.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\nfunction string(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value, 'string') && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options, 'string');\n\n    if (!isEmptyValue(value, 'string')) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n      rules.pattern(rule, value, source, errors, options);\n\n      if (rule.whitespace === true) {\n        rules.whitespace(rule, value, source, errors, options);\n      }\n    }\n  }\n\n  callback(errors);\n}\n/**\n *  Validates a function.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction method(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n}\n/**\n *  Validates a number.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction number(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (value === '') {\n      value = undefined;\n    }\n\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n}\n/**\n *  Validates a boolean.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction _boolean(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n}\n/**\n *  Validates the regular expression type.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction regexp(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (!isEmptyValue(value)) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n}\n/**\n *  Validates a number is an integer.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction integer(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n}\n/**\n *  Validates a number is a floating point number.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction floatFn(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n}\n/**\n *  Validates an array.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction array(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value, 'array') && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options, 'array');\n\n    if (!isEmptyValue(value, 'array')) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n}\n/**\n *  Validates an object.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction object(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n}\n\nvar ENUM$1 = 'enum';\n/**\n *  Validates an enumerable list.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\nfunction enumerable$1(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (value !== undefined) {\n      rules[ENUM$1](rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n}\n/**\n *  Validates a regular expression pattern.\n *\n *  Performs validation when a rule only contains\n *  a pattern property but is not declared as a string type.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction pattern$2(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value, 'string') && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (!isEmptyValue(value, 'string')) {\n      rules.pattern(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n}\n\nfunction date(rule, value, callback, source, options) {\n  // console.log('integer rule called %j', rule);\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field); // console.log('validate on %s value', value);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n\n    if (!isEmptyValue(value)) {\n      var dateObject;\n\n      if (typeof value === 'number') {\n        dateObject = new Date(value);\n      } else {\n        dateObject = value;\n      }\n\n      rules.type(rule, dateObject, source, errors, options);\n\n      if (dateObject) {\n        rules.range(rule, dateObject.getTime(), source, errors, options);\n      }\n    }\n  }\n\n  callback(errors);\n}\n\nfunction required$1(rule, value, callback, source, options) {\n  var errors = [];\n  var type = Array.isArray(value) ? 'array' : typeof value;\n  rules.required(rule, value, source, errors, options, type);\n  callback(errors);\n}\n\nfunction type$1(rule, value, callback, source, options) {\n  var ruleType = rule.type;\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value, ruleType) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options, ruleType);\n\n    if (!isEmptyValue(value, ruleType)) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n}\n/**\n *  Performs validation for any type.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\n\nfunction any(rule, value, callback, source, options) {\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options);\n  }\n\n  callback(errors);\n}\n\nvar validators = {\n  string: string,\n  method: method,\n  number: number,\n  \"boolean\": _boolean,\n  regexp: regexp,\n  integer: integer,\n  \"float\": floatFn,\n  array: array,\n  object: object,\n  \"enum\": enumerable$1,\n  pattern: pattern$2,\n  date: date,\n  url: type$1,\n  hex: type$1,\n  email: type$1,\n  required: required$1,\n  any: any\n};\n\nfunction newMessages() {\n  return {\n    \"default\": 'Validation error on field %s',\n    required: '%s is required',\n    \"enum\": '%s must be one of %s',\n    whitespace: '%s cannot be empty',\n    date: {\n      format: '%s date %s is invalid for format %s',\n      parse: '%s date could not be parsed, %s is invalid ',\n      invalid: '%s date %s is invalid'\n    },\n    types: {\n      string: '%s is not a %s',\n      method: '%s is not a %s (function)',\n      array: '%s is not an %s',\n      object: '%s is not an %s',\n      number: '%s is not a %s',\n      date: '%s is not a %s',\n      \"boolean\": '%s is not a %s',\n      integer: '%s is not an %s',\n      \"float\": '%s is not a %s',\n      regexp: '%s is not a valid %s',\n      email: '%s is not a valid %s',\n      url: '%s is not a valid %s',\n      hex: '%s is not a valid %s'\n    },\n    string: {\n      len: '%s must be exactly %s characters',\n      min: '%s must be at least %s characters',\n      max: '%s cannot be longer than %s characters',\n      range: '%s must be between %s and %s characters'\n    },\n    number: {\n      len: '%s must equal %s',\n      min: '%s cannot be less than %s',\n      max: '%s cannot be greater than %s',\n      range: '%s must be between %s and %s'\n    },\n    array: {\n      len: '%s must be exactly %s in length',\n      min: '%s cannot be less than %s in length',\n      max: '%s cannot be greater than %s in length',\n      range: '%s must be between %s and %s in length'\n    },\n    pattern: {\n      mismatch: '%s value %s does not match pattern %s'\n    },\n    clone: function clone() {\n      var cloned = JSON.parse(JSON.stringify(this));\n      cloned.clone = this.clone;\n      return cloned;\n    }\n  };\n}\n\nvar messages = newMessages();\n/**\n *  Encapsulates a validation schema.\n *\n *  @param descriptor An object declaring validation rules\n *  for this schema.\n */\n\nfunction Schema(descriptor) {\n  this.rules = null;\n  this._messages = messages;\n  this.define(descriptor);\n}\n\nSchema.prototype = {\n  messages: function messages(_messages) {\n    if (_messages) {\n      this._messages = deepMerge(newMessages(), _messages);\n    }\n\n    return this._messages;\n  },\n  define: function define(rules) {\n    if (!rules) {\n      throw new Error('Cannot configure a schema with no rules');\n    }\n\n    if (typeof rules !== 'object' || Array.isArray(rules)) {\n      throw new Error('Rules must be an object');\n    }\n\n    this.rules = {};\n    var z;\n    var item;\n\n    for (z in rules) {\n      if (rules.hasOwnProperty(z)) {\n        item = rules[z];\n        this.rules[z] = Array.isArray(item) ? item : [item];\n      }\n    }\n  },\n  validate: function validate(source_, o, oc) {\n    var _this = this;\n\n    if (o === void 0) {\n      o = {};\n    }\n\n    if (oc === void 0) {\n      oc = function oc() {};\n    }\n\n    var source = source_;\n    var options = o;\n    var callback = oc;\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (!this.rules || Object.keys(this.rules).length === 0) {\n      if (callback) {\n        callback();\n      }\n\n      return Promise.resolve();\n    }\n\n    function complete(results) {\n      var i;\n      var errors = [];\n      var fields = {};\n\n      function add(e) {\n        if (Array.isArray(e)) {\n          var _errors;\n\n          errors = (_errors = errors).concat.apply(_errors, e);\n        } else {\n          errors.push(e);\n        }\n      }\n\n      for (i = 0; i < results.length; i++) {\n        add(results[i]);\n      }\n\n      if (!errors.length) {\n        errors = null;\n        fields = null;\n      } else {\n        fields = convertFieldsError(errors);\n      }\n\n      callback(errors, fields);\n    }\n\n    if (options.messages) {\n      var messages$1 = this.messages();\n\n      if (messages$1 === messages) {\n        messages$1 = newMessages();\n      }\n\n      deepMerge(messages$1, options.messages);\n      options.messages = messages$1;\n    } else {\n      options.messages = this.messages();\n    }\n\n    var arr;\n    var value;\n    var series = {};\n    var keys = options.keys || Object.keys(this.rules);\n    keys.forEach(function (z) {\n      arr = _this.rules[z];\n      value = source[z];\n      arr.forEach(function (r) {\n        var rule = r;\n\n        if (typeof rule.transform === 'function') {\n          if (source === source_) {\n            source = _extends({}, source);\n          }\n\n          value = source[z] = rule.transform(value);\n        }\n\n        if (typeof rule === 'function') {\n          rule = {\n            validator: rule\n          };\n        } else {\n          rule = _extends({}, rule);\n        }\n\n        rule.validator = _this.getValidationMethod(rule);\n        rule.field = z;\n        rule.fullField = rule.fullField || z;\n        rule.type = _this.getType(rule);\n\n        if (!rule.validator) {\n          return;\n        }\n\n        series[z] = series[z] || [];\n        series[z].push({\n          rule: rule,\n          value: value,\n          source: source,\n          field: z\n        });\n      });\n    });\n    var errorFields = {};\n    return asyncMap(series, options, function (data, doIt) {\n      var rule = data.rule;\n      var deep = (rule.type === 'object' || rule.type === 'array') && (typeof rule.fields === 'object' || typeof rule.defaultField === 'object');\n      deep = deep && (rule.required || !rule.required && data.value);\n      rule.field = data.field;\n\n      function addFullfield(key, schema) {\n        return _extends({}, schema, {\n          fullField: rule.fullField + \".\" + key\n        });\n      }\n\n      function cb(e) {\n        if (e === void 0) {\n          e = [];\n        }\n\n        var errors = e;\n\n        if (!Array.isArray(errors)) {\n          errors = [errors];\n        }\n\n        if (!options.suppressWarning && errors.length) {\n          Schema.warning('async-validator:', errors);\n        }\n\n        if (errors.length && rule.message) {\n          errors = [].concat(rule.message);\n        }\n\n        errors = errors.map(complementError(rule));\n\n        if (options.first && errors.length) {\n          errorFields[rule.field] = 1;\n          return doIt(errors);\n        }\n\n        if (!deep) {\n          doIt(errors);\n        } else {\n          // if rule is required but the target object\n          // does not exist fail at the rule level and don't\n          // go deeper\n          if (rule.required && !data.value) {\n            if (rule.message) {\n              errors = [].concat(rule.message).map(complementError(rule));\n            } else if (options.error) {\n              errors = [options.error(rule, format(options.messages.required, rule.field))];\n            } else {\n              errors = [];\n            }\n\n            return doIt(errors);\n          }\n\n          var fieldsSchema = {};\n\n          if (rule.defaultField) {\n            for (var k in data.value) {\n              if (data.value.hasOwnProperty(k)) {\n                fieldsSchema[k] = rule.defaultField;\n              }\n            }\n          }\n\n          fieldsSchema = _extends({}, fieldsSchema, {}, data.rule.fields);\n\n          for (var f in fieldsSchema) {\n            if (fieldsSchema.hasOwnProperty(f)) {\n              var fieldSchema = Array.isArray(fieldsSchema[f]) ? fieldsSchema[f] : [fieldsSchema[f]];\n              fieldsSchema[f] = fieldSchema.map(addFullfield.bind(null, f));\n            }\n          }\n\n          var schema = new Schema(fieldsSchema);\n          schema.messages(options.messages);\n\n          if (data.rule.options) {\n            data.rule.options.messages = options.messages;\n            data.rule.options.error = options.error;\n          }\n\n          schema.validate(data.value, data.rule.options || options, function (errs) {\n            var finalErrors = [];\n\n            if (errors && errors.length) {\n              finalErrors.push.apply(finalErrors, errors);\n            }\n\n            if (errs && errs.length) {\n              finalErrors.push.apply(finalErrors, errs);\n            }\n\n            doIt(finalErrors.length ? finalErrors : null);\n          });\n        }\n      }\n\n      var res;\n\n      if (rule.asyncValidator) {\n        res = rule.asyncValidator(rule, data.value, cb, data.source, options);\n      } else if (rule.validator) {\n        res = rule.validator(rule, data.value, cb, data.source, options);\n\n        if (res === true) {\n          cb();\n        } else if (res === false) {\n          cb(rule.message || rule.field + \" fails\");\n        } else if (res instanceof Array) {\n          cb(res);\n        } else if (res instanceof Error) {\n          cb(res.message);\n        }\n      }\n\n      if (res && res.then) {\n        res.then(function () {\n          return cb();\n        }, function (e) {\n          return cb(e);\n        });\n      }\n    }, function (results) {\n      complete(results);\n    });\n  },\n  getType: function getType(rule) {\n    if (rule.type === undefined && rule.pattern instanceof RegExp) {\n      rule.type = 'pattern';\n    }\n\n    if (typeof rule.validator !== 'function' && rule.type && !validators.hasOwnProperty(rule.type)) {\n      throw new Error(format('Unknown rule type %s', rule.type));\n    }\n\n    return rule.type || 'string';\n  },\n  getValidationMethod: function getValidationMethod(rule) {\n    if (typeof rule.validator === 'function') {\n      return rule.validator;\n    }\n\n    var keys = Object.keys(rule);\n    var messageIndex = keys.indexOf('message');\n\n    if (messageIndex !== -1) {\n      keys.splice(messageIndex, 1);\n    }\n\n    if (keys.length === 1 && keys[0] === 'required') {\n      return validators.required;\n    }\n\n    return validators[this.getType(rule)] || false;\n  }\n};\n\nSchema.register = function register(type, validator) {\n  if (typeof validator !== 'function') {\n    throw new Error('Cannot register a validator by type, validator is not a function');\n  }\n\n  validators[type] = validator;\n};\n\nSchema.warning = warning;\nSchema.messages = messages;\nexport default Schema;","map":{"version":3,"sources":["../../src/util.js","../../src/rule/required.js","../../src/rule/whitespace.js","../../src/rule/type.js","../../src/rule/range.js","../../src/rule/enum.js","../../src/rule/pattern.js","../../src/rule/index.js","../../src/validator/string.js","../../src/validator/method.js","../../src/validator/number.js","../../src/validator/boolean.js","../../src/validator/regexp.js","../../src/validator/integer.js","../../src/validator/float.js","../../src/validator/array.js","../../src/validator/object.js","../../src/validator/enum.js","../../src/validator/pattern.js","../../src/validator/date.js","../../src/validator/required.js","../../src/validator/type.js","../../src/validator/any.js","../../src/validator/index.js","../../src/messages.js","../../src/index.js"],"names":["formatRegExp","warning","process","console","errors","fields","field","error","args","i","f","len","str","x","String","Number","JSON","arg","type","value","Array","isNativeStringType","results","total","arrLength","arr","callback","func","index","original","next","ret","Object","objArr","option","pending","reject","convertFieldsError","resolve","flattenArr","flattenObjArr","asyncSerialArray","firstFields","objArrKeys","objArrLength","asyncParallelArray","oe","rule","message","fullField","source","target","util","options","pattern","email","url","hex","types","integer","parseInt","array","regexp","date","number","isNaN","object","method","required","custom","ruleType","min","max","spRegexp","val","key","num","ENUM","_pattern","whitespace","range","validate","isEmptyValue","rules","dateObject","string","any","format","parse","invalid","mismatch","clone","cloned","messages","newMessages","Schema","deepMerge","define","item","o","oc","Promise","add","series","keys","validator","z","errorFields","asyncMap","data","deep","e","complementError","doIt","fieldsSchema","fieldSchema","addFullfield","schema","finalErrors","errs","res","cb","complete","getType","validators","getValidationMethod","messageIndex"],"mappings":"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","sourcesContent":["/* eslint no-console:0 */\n\nconst formatRegExp = /%[sdj%]/g;\n\nexport let warning = () => {\n};\n\n// don't print warning message when in production env or node runtime\nif (\n  typeof process !== 'undefined' &&\n  process.env &&\n  process.env.NODE_ENV !== 'production' &&\n  typeof window !== 'undefined' &&\n  typeof document !== 'undefined'\n) {\n  warning = (type, errors) => {\n    if (typeof console !== 'undefined' && console.warn) {\n      if (errors.every(e => typeof e === 'string')) {\n        console.warn(type, errors);\n      }\n    }\n  };\n}\n\nexport function convertFieldsError(errors) {\n  if (!errors || !errors.length) return null;\n  const fields = {};\n  errors.forEach(error => {\n    const field = error.field;\n    fields[field] = fields[field] || [];\n    fields[field].push(error);\n  });\n  return fields;\n}\n\nexport function format(...args) {\n  let i = 1;\n  const f = args[0];\n  const len = args.length;\n  if (typeof f === 'function') {\n    return f.apply(null, args.slice(1));\n  }\n  if (typeof f === 'string') {\n    let str = String(f).replace(formatRegExp, x => {\n      if (x === '%%') {\n        return '%';\n      }\n      if (i >= len) {\n        return x;\n      }\n      switch (x) {\n        case '%s':\n          return String(args[i++]);\n        case '%d':\n          return Number(args[i++]);\n        case '%j':\n          try {\n            return JSON.stringify(args[i++]);\n          } catch (_) {\n            return '[Circular]';\n          }\n          break;\n        default:\n          return x;\n      }\n    });\n    for (let arg = args[i]; i < len; arg = args[++i]) {\n      str += ` ${arg}`;\n    }\n    return str;\n  }\n  return f;\n}\n\nfunction isNativeStringType(type) {\n  return (\n    type === 'string' ||\n    type === 'url' ||\n    type === 'hex' ||\n    type === 'email' ||\n    type === 'pattern'\n  );\n}\n\nexport function isEmptyValue(value, type) {\n  if (value === undefined || value === null) {\n    return true;\n  }\n  if (type === 'array' && Array.isArray(value) && !value.length) {\n    return true;\n  }\n  if (isNativeStringType(type) && typeof value === 'string' && !value) {\n    return true;\n  }\n  return false;\n}\n\nexport function isEmptyObject(obj) {\n  return Object.keys(obj).length === 0;\n}\n\nfunction asyncParallelArray(arr, func, callback) {\n  const results = [];\n  let total = 0;\n  const arrLength = arr.length;\n\n  function count(errors) {\n    results.push.apply(results, errors);\n    total++;\n    if (total === arrLength) {\n      callback(results);\n    }\n  }\n\n  arr.forEach(a => {\n    func(a, count);\n  });\n}\n\nfunction asyncSerialArray(arr, func, callback) {\n  let index = 0;\n  const arrLength = arr.length;\n\n  function next(errors) {\n    if (errors && errors.length) {\n      callback(errors);\n      return;\n    }\n    const original = index;\n    index = index + 1;\n    if (original < arrLength) {\n      func(arr[original], next);\n    } else {\n      callback([]);\n    }\n  }\n\n  next([]);\n}\n\nfunction flattenObjArr(objArr) {\n  const ret = [];\n  Object.keys(objArr).forEach(k => {\n    ret.push.apply(ret, objArr[k]);\n  });\n  return ret;\n}\n\nexport function asyncMap(objArr, option, func, callback) {\n  if (option.first) {\n    const pending = new Promise((resolve, reject) => {\n      const next = errors => {\n        callback(errors);\n        return errors.length\n          ? reject({ errors, fields: convertFieldsError(errors) })\n          : resolve();\n      };\n      const flattenArr = flattenObjArr(objArr);\n      asyncSerialArray(flattenArr, func, next);\n    });\n    pending.catch(e => e);\n    return pending;\n  }\n  let firstFields = option.firstFields || [];\n  if (firstFields === true) {\n    firstFields = Object.keys(objArr);\n  }\n  const objArrKeys = Object.keys(objArr);\n  const objArrLength = objArrKeys.length;\n  let total = 0;\n  const results = [];\n  const pending = new Promise((resolve, reject) => {\n    const next = errors => {\n      results.push.apply(results, errors);\n      total++;\n      if (total === objArrLength) {\n        callback(results);\n        return results.length\n          ? reject({ errors: results, fields: convertFieldsError(results) })\n          : resolve();\n      }\n    };\n    objArrKeys.forEach(key => {\n      const arr = objArr[key];\n      if (firstFields.indexOf(key) !== -1) {\n        asyncSerialArray(arr, func, next);\n      } else {\n        asyncParallelArray(arr, func, next);\n      }\n    });\n  });\n  pending.catch(e => e);\n  return pending;\n}\n\nexport function complementError(rule) {\n  return oe => {\n    if (oe && oe.message) {\n      oe.field = oe.field || rule.fullField;\n      return oe;\n    }\n    return {\n      message: typeof oe === 'function' ? oe() : oe,\n      field: oe.field || rule.fullField,\n    };\n  };\n}\n\nexport function deepMerge(target, source) {\n  if (source) {\n    for (const s in source) {\n      if (source.hasOwnProperty(s)) {\n        const value = source[s];\n        if (typeof value === 'object' && typeof target[s] === 'object') {\n          target[s] = {\n            ...target[s],\n            ...value,\n          };\n        } else {\n          target[s] = value;\n        }\n      }\n    }\n  }\n  return target;\n}\n","import * as util from '../util';\n\n/**\n *  Rule for validating required fields.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction required(rule, value, source, errors, options, type) {\n  if (\n    rule.required &&\n    (!source.hasOwnProperty(rule.field) ||\n      util.isEmptyValue(value, type || rule.type))\n  ) {\n    errors.push(util.format(options.messages.required, rule.fullField));\n  }\n}\n\nexport default required;\n","import * as util from '../util';\n\n/**\n *  Rule for validating whitespace.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction whitespace(rule, value, source, errors, options) {\n  if (/^\\s+$/.test(value) || value === '') {\n    errors.push(util.format(options.messages.whitespace, rule.fullField));\n  }\n}\n\nexport default whitespace;\n","import * as util from '../util';\nimport required from './required';\n\n/* eslint max-len:0 */\n\nconst pattern = {\n  // http://emailregex.com/\n  email: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n  url: new RegExp(\n    '^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$',\n    'i',\n  ),\n  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i,\n};\n\nconst types = {\n  integer(value) {\n    return types.number(value) && parseInt(value, 10) === value;\n  },\n  float(value) {\n    return types.number(value) && !types.integer(value);\n  },\n  array(value) {\n    return Array.isArray(value);\n  },\n  regexp(value) {\n    if (value instanceof RegExp) {\n      return true;\n    }\n    try {\n      return !!new RegExp(value);\n    } catch (e) {\n      return false;\n    }\n  },\n  date(value) {\n    return (\n      typeof value.getTime === 'function' &&\n      typeof value.getMonth === 'function' &&\n      typeof value.getYear === 'function'\n    );\n  },\n  number(value) {\n    if (isNaN(value)) {\n      return false;\n    }\n    return typeof value === 'number';\n  },\n  object(value) {\n    return typeof value === 'object' && !types.array(value);\n  },\n  method(value) {\n    return typeof value === 'function';\n  },\n  email(value) {\n    return (\n      typeof value === 'string' &&\n      !!value.match(pattern.email) &&\n      value.length < 255\n    );\n  },\n  url(value) {\n    return typeof value === 'string' && !!value.match(pattern.url);\n  },\n  hex(value) {\n    return typeof value === 'string' && !!value.match(pattern.hex);\n  },\n};\n\n/**\n *  Rule for validating the type of a value.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction type(rule, value, source, errors, options) {\n  if (rule.required && value === undefined) {\n    required(rule, value, source, errors, options);\n    return;\n  }\n  const custom = [\n    'integer',\n    'float',\n    'array',\n    'regexp',\n    'object',\n    'method',\n    'email',\n    'number',\n    'date',\n    'url',\n    'hex',\n  ];\n  const ruleType = rule.type;\n  if (custom.indexOf(ruleType) > -1) {\n    if (!types[ruleType](value)) {\n      errors.push(\n        util.format(\n          options.messages.types[ruleType],\n          rule.fullField,\n          rule.type,\n        ),\n      );\n    }\n    // straight typeof check\n  } else if (ruleType && typeof value !== rule.type) {\n    errors.push(\n      util.format(options.messages.types[ruleType], rule.fullField, rule.type),\n    );\n  }\n}\n\nexport default type;\n","import * as util from '../util';\n\n/**\n *  Rule for validating minimum and maximum allowed values.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction range(rule, value, source, errors, options) {\n  const len = typeof rule.len === 'number';\n  const min = typeof rule.min === 'number';\n  const max = typeof rule.max === 'number';\n  // 正则匹配码点范围从U+010000一直到U+10FFFF的文字（补充平面Supplementary Plane）\n  const spRegexp = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n  let val = value;\n  let key = null;\n  const num = typeof value === 'number';\n  const str = typeof value === 'string';\n  const arr = Array.isArray(value);\n  if (num) {\n    key = 'number';\n  } else if (str) {\n    key = 'string';\n  } else if (arr) {\n    key = 'array';\n  }\n  // if the value is not of a supported type for range validation\n  // the validation rule rule should use the\n  // type property to also test for a particular type\n  if (!key) {\n    return false;\n  }\n  if (arr) {\n    val = value.length;\n  }\n  if (str) {\n    // 处理码点大于U+010000的文字length属性不准确的bug，如\"𠮷𠮷𠮷\".lenght !== 3\n    val = value.replace(spRegexp, '_').length;\n  }\n  if (len) {\n    if (val !== rule.len) {\n      errors.push(\n        util.format(options.messages[key].len, rule.fullField, rule.len),\n      );\n    }\n  } else if (min && !max && val < rule.min) {\n    errors.push(\n      util.format(options.messages[key].min, rule.fullField, rule.min),\n    );\n  } else if (max && !min && val > rule.max) {\n    errors.push(\n      util.format(options.messages[key].max, rule.fullField, rule.max),\n    );\n  } else if (min && max && (val < rule.min || val > rule.max)) {\n    errors.push(\n      util.format(\n        options.messages[key].range,\n        rule.fullField,\n        rule.min,\n        rule.max,\n      ),\n    );\n  }\n}\n\nexport default range;\n","import * as util from '../util';\n\nconst ENUM = 'enum';\n\n/**\n *  Rule for validating a value exists in an enumerable list.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction enumerable(rule, value, source, errors, options) {\n  rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];\n  if (rule[ENUM].indexOf(value) === -1) {\n    errors.push(\n      util.format(\n        options.messages[ENUM],\n        rule.fullField,\n        rule[ENUM].join(', '),\n      ),\n    );\n  }\n}\n\nexport default enumerable;\n","import * as util from '../util';\n\n/**\n *  Rule for validating a regular expression pattern.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction pattern(rule, value, source, errors, options) {\n  if (rule.pattern) {\n    if (rule.pattern instanceof RegExp) {\n      // if a RegExp instance is passed, reset `lastIndex` in case its `global`\n      // flag is accidentally set to `true`, which in a validation scenario\n      // is not necessary and the result might be misleading\n      rule.pattern.lastIndex = 0;\n      if (!rule.pattern.test(value)) {\n        errors.push(\n          util.format(\n            options.messages.pattern.mismatch,\n            rule.fullField,\n            value,\n            rule.pattern,\n          ),\n        );\n      }\n    } else if (typeof rule.pattern === 'string') {\n      const _pattern = new RegExp(rule.pattern);\n      if (!_pattern.test(value)) {\n        errors.push(\n          util.format(\n            options.messages.pattern.mismatch,\n            rule.fullField,\n            value,\n            rule.pattern,\n          ),\n        );\n      }\n    }\n  }\n}\n\nexport default pattern;\n","import required from './required';\nimport whitespace from './whitespace';\nimport type from './type';\nimport range from './range';\nimport enumRule from './enum';\nimport pattern from './pattern';\n\nexport default {\n  required,\n  whitespace,\n  type,\n  range,\n  enum: enumRule,\n  pattern,\n};\n","import rules from '../rule/index.js';\nimport { isEmptyValue } from '../util';\n\n/**\n *  Performs validation for string types.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction string(rule, value, callback, source, options) {\n  const errors = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value, 'string') && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options, 'string');\n    if (!isEmptyValue(value, 'string')) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n      rules.pattern(rule, value, source, errors, options);\n      if (rule.whitespace === true) {\n        rules.whitespace(rule, value, source, errors, options);\n      }\n    }\n  }\n  callback(errors);\n}\n\nexport default string;\n","import rules from '../rule/index.js';\nimport { isEmptyValue } from '../util';\n\n/**\n *  Validates a function.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction method(rule, value, callback, source, options) {\n  const errors = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n}\n\nexport default method;\n","import rules from '../rule/index.js';\nimport { isEmptyValue } from '../util';\n\n/**\n *  Validates a number.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction number(rule, value, callback, source, options) {\n  const errors = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (value === '') {\n      value = undefined;\n    }\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n}\n\nexport default number;\n","import { isEmptyValue } from '../util';\nimport rules from '../rule/index.js';\n\n/**\n *  Validates a boolean.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction boolean(rule, value, callback, source, options) {\n  const errors = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n}\n\nexport default boolean;\n","import rules from '../rule/index.js';\nimport { isEmptyValue } from '../util';\n\n/**\n *  Validates the regular expression type.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction regexp(rule, value, callback, source, options) {\n  const errors = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (!isEmptyValue(value)) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n}\n\nexport default regexp;\n","import rules from '../rule/index.js';\nimport { isEmptyValue } from '../util';\n\n/**\n *  Validates a number is an integer.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction integer(rule, value, callback, source, options) {\n  const errors = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n}\n\nexport default integer;\n","import rules from '../rule/index.js';\nimport { isEmptyValue } from '../util';\n\n/**\n *  Validates a number is a floating point number.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction floatFn(rule, value, callback, source, options) {\n  const errors = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n}\n\nexport default floatFn;\n","import rules from '../rule/index';\nimport { isEmptyValue } from '../util';\n/**\n *  Validates an array.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction array(rule, value, callback, source, options) {\n  const errors = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value, 'array') && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options, 'array');\n    if (!isEmptyValue(value, 'array')) {\n      rules.type(rule, value, source, errors, options);\n      rules.range(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n}\n\nexport default array;\n","import rules from '../rule/index.js';\nimport { isEmptyValue } from '../util';\n\n/**\n *  Validates an object.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction object(rule, value, callback, source, options) {\n  const errors = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (value !== undefined) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n}\n\nexport default object;\n","import rules from '../rule/index.js';\nimport { isEmptyValue } from '../util';\n\nconst ENUM = 'enum';\n\n/**\n *  Validates an enumerable list.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction enumerable(rule, value, callback, source, options) {\n  const errors = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (value !== undefined) {\n      rules[ENUM](rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n}\n\nexport default enumerable;\n","import rules from '../rule/index.js';\nimport { isEmptyValue } from '../util';\n\n/**\n *  Validates a regular expression pattern.\n *\n *  Performs validation when a rule only contains\n *  a pattern property but is not declared as a string type.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction pattern(rule, value, callback, source, options) {\n  const errors = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value, 'string') && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (!isEmptyValue(value, 'string')) {\n      rules.pattern(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n}\n\nexport default pattern;\n","import rules from '../rule/index.js';\nimport { isEmptyValue } from '../util';\n\nfunction date(rule, value, callback, source, options) {\n  // console.log('integer rule called %j', rule);\n  const errors = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  // console.log('validate on %s value', value);\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n    if (!isEmptyValue(value)) {\n      let dateObject;\n\n      if (typeof value === 'number') {\n        dateObject = new Date(value);\n      } else {\n        dateObject = value;\n      }\n\n      rules.type(rule, dateObject, source, errors, options);\n      if (dateObject) {\n        rules.range(rule, dateObject.getTime(), source, errors, options);\n      }\n    }\n  }\n  callback(errors);\n}\n\nexport default date;\n","import rules from '../rule/index.js';\n\nfunction required(rule, value, callback, source, options) {\n  const errors = [];\n  const type = Array.isArray(value) ? 'array' : typeof value;\n  rules.required(rule, value, source, errors, options, type);\n  callback(errors);\n}\n\nexport default required;\n","import rules from '../rule/index.js';\nimport { isEmptyValue } from '../util';\n\nfunction type(rule, value, callback, source, options) {\n  const ruleType = rule.type;\n  const errors = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value, ruleType) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options, ruleType);\n    if (!isEmptyValue(value, ruleType)) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n}\n\nexport default type;\n","import rules from '../rule/index.js';\nimport { isEmptyValue } from '../util';\n\n/**\n *  Performs validation for any type.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param callback The callback function.\n *  @param source The source object being validated.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction any(rule, value, callback, source, options) {\n  const errors = [];\n  const validate =\n    rule.required || (!rule.required && source.hasOwnProperty(rule.field));\n  if (validate) {\n    if (isEmptyValue(value) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options);\n  }\n  callback(errors);\n}\n\nexport default any;\n","import string from './string';\nimport method from './method';\nimport number from './number';\nimport boolean from './boolean';\nimport regexp from './regexp';\nimport integer from './integer';\nimport float from './float';\nimport array from './array';\nimport object from './object';\nimport enumValidator from './enum';\nimport pattern from './pattern';\nimport date from './date';\nimport required from './required';\nimport type from './type';\nimport any from './any';\n\nexport default {\n  string,\n  method,\n  number,\n  boolean,\n  regexp,\n  integer,\n  float,\n  array,\n  object,\n  enum: enumValidator,\n  pattern,\n  date,\n  url: type,\n  hex: type,\n  email: type,\n  required,\n  any,\n};\n","export function newMessages() {\n  return {\n    default: 'Validation error on field %s',\n    required: '%s is required',\n    enum: '%s must be one of %s',\n    whitespace: '%s cannot be empty',\n    date: {\n      format: '%s date %s is invalid for format %s',\n      parse: '%s date could not be parsed, %s is invalid ',\n      invalid: '%s date %s is invalid',\n    },\n    types: {\n      string: '%s is not a %s',\n      method: '%s is not a %s (function)',\n      array: '%s is not an %s',\n      object: '%s is not an %s',\n      number: '%s is not a %s',\n      date: '%s is not a %s',\n      boolean: '%s is not a %s',\n      integer: '%s is not an %s',\n      float: '%s is not a %s',\n      regexp: '%s is not a valid %s',\n      email: '%s is not a valid %s',\n      url: '%s is not a valid %s',\n      hex: '%s is not a valid %s',\n    },\n    string: {\n      len: '%s must be exactly %s characters',\n      min: '%s must be at least %s characters',\n      max: '%s cannot be longer than %s characters',\n      range: '%s must be between %s and %s characters',\n    },\n    number: {\n      len: '%s must equal %s',\n      min: '%s cannot be less than %s',\n      max: '%s cannot be greater than %s',\n      range: '%s must be between %s and %s',\n    },\n    array: {\n      len: '%s must be exactly %s in length',\n      min: '%s cannot be less than %s in length',\n      max: '%s cannot be greater than %s in length',\n      range: '%s must be between %s and %s in length',\n    },\n    pattern: {\n      mismatch: '%s value %s does not match pattern %s',\n    },\n    clone() {\n      const cloned = JSON.parse(JSON.stringify(this));\n      cloned.clone = this.clone;\n      return cloned;\n    },\n  };\n}\n\nexport const messages = newMessages();\n","import {\n  format,\n  complementError,\n  asyncMap,\n  warning,\n  deepMerge,\n  convertFieldsError,\n} from './util';\nimport validators from './validator/index';\nimport { messages as defaultMessages, newMessages } from './messages';\n\n/**\n *  Encapsulates a validation schema.\n *\n *  @param descriptor An object declaring validation rules\n *  for this schema.\n */\nfunction Schema(descriptor) {\n  this.rules = null;\n  this._messages = defaultMessages;\n  this.define(descriptor);\n}\n\nSchema.prototype = {\n  messages(messages) {\n    if (messages) {\n      this._messages = deepMerge(newMessages(), messages);\n    }\n    return this._messages;\n  },\n  define(rules) {\n    if (!rules) {\n      throw new Error('Cannot configure a schema with no rules');\n    }\n    if (typeof rules !== 'object' || Array.isArray(rules)) {\n      throw new Error('Rules must be an object');\n    }\n    this.rules = {};\n    let z;\n    let item;\n    for (z in rules) {\n      if (rules.hasOwnProperty(z)) {\n        item = rules[z];\n        this.rules[z] = Array.isArray(item) ? item : [item];\n      }\n    }\n  },\n  validate(source_, o = {}, oc = () => {}) {\n    let source = source_;\n    let options = o;\n    let callback = oc;\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    if (!this.rules || Object.keys(this.rules).length === 0) {\n      if (callback) {\n        callback();\n      }\n      return Promise.resolve();\n    }\n\n    function complete(results) {\n      let i;\n      let errors = [];\n      let fields = {};\n\n      function add(e) {\n        if (Array.isArray(e)) {\n          errors = errors.concat(...e);\n        } else {\n          errors.push(e);\n        }\n      }\n\n      for (i = 0; i < results.length; i++) {\n        add(results[i]);\n      }\n      if (!errors.length) {\n        errors = null;\n        fields = null;\n      } else {\n        fields = convertFieldsError(errors);\n      }\n      callback(errors, fields);\n    }\n\n    if (options.messages) {\n      let messages = this.messages();\n      if (messages === defaultMessages) {\n        messages = newMessages();\n      }\n      deepMerge(messages, options.messages);\n      options.messages = messages;\n    } else {\n      options.messages = this.messages();\n    }\n    let arr;\n    let value;\n    const series = {};\n    const keys = options.keys || Object.keys(this.rules);\n    keys.forEach(z => {\n      arr = this.rules[z];\n      value = source[z];\n      arr.forEach(r => {\n        let rule = r;\n        if (typeof rule.transform === 'function') {\n          if (source === source_) {\n            source = { ...source };\n          }\n          value = source[z] = rule.transform(value);\n        }\n        if (typeof rule === 'function') {\n          rule = {\n            validator: rule,\n          };\n        } else {\n          rule = { ...rule };\n        }\n        rule.validator = this.getValidationMethod(rule);\n        rule.field = z;\n        rule.fullField = rule.fullField || z;\n        rule.type = this.getType(rule);\n        if (!rule.validator) {\n          return;\n        }\n        series[z] = series[z] || [];\n        series[z].push({\n          rule,\n          value,\n          source,\n          field: z,\n        });\n      });\n    });\n    const errorFields = {};\n    return asyncMap(\n      series,\n      options,\n      (data, doIt) => {\n        const rule = data.rule;\n        let deep =\n          (rule.type === 'object' || rule.type === 'array') &&\n          (typeof rule.fields === 'object' ||\n            typeof rule.defaultField === 'object');\n        deep = deep && (rule.required || (!rule.required && data.value));\n        rule.field = data.field;\n\n        function addFullfield(key, schema) {\n          return {\n            ...schema,\n            fullField: `${rule.fullField}.${key}`,\n          };\n        }\n\n        function cb(e = []) {\n          let errors = e;\n          if (!Array.isArray(errors)) {\n            errors = [errors];\n          }\n          if (!options.suppressWarning && errors.length) {\n            Schema.warning('async-validator:', errors);\n          }\n          if (errors.length && rule.message) {\n            errors = [].concat(rule.message);\n          }\n\n          errors = errors.map(complementError(rule));\n\n          if (options.first && errors.length) {\n            errorFields[rule.field] = 1;\n            return doIt(errors);\n          }\n          if (!deep) {\n            doIt(errors);\n          } else {\n            // if rule is required but the target object\n            // does not exist fail at the rule level and don't\n            // go deeper\n            if (rule.required && !data.value) {\n              if (rule.message) {\n                errors = [].concat(rule.message).map(complementError(rule));\n              } else if (options.error) {\n                errors = [\n                  options.error(\n                    rule,\n                    format(options.messages.required, rule.field),\n                  ),\n                ];\n              } else {\n                errors = [];\n              }\n              return doIt(errors);\n            }\n\n            let fieldsSchema = {};\n            if (rule.defaultField) {\n              for (const k in data.value) {\n                if (data.value.hasOwnProperty(k)) {\n                  fieldsSchema[k] = rule.defaultField;\n                }\n              }\n            }\n            fieldsSchema = {\n              ...fieldsSchema,\n              ...data.rule.fields,\n            };\n            for (const f in fieldsSchema) {\n              if (fieldsSchema.hasOwnProperty(f)) {\n                const fieldSchema = Array.isArray(fieldsSchema[f])\n                  ? fieldsSchema[f]\n                  : [fieldsSchema[f]];\n                fieldsSchema[f] = fieldSchema.map(addFullfield.bind(null, f));\n              }\n            }\n            const schema = new Schema(fieldsSchema);\n            schema.messages(options.messages);\n            if (data.rule.options) {\n              data.rule.options.messages = options.messages;\n              data.rule.options.error = options.error;\n            }\n            schema.validate(data.value, data.rule.options || options, errs => {\n              const finalErrors = [];\n              if (errors && errors.length) {\n                finalErrors.push(...errors);\n              }\n              if (errs && errs.length) {\n                finalErrors.push(...errs);\n              }\n              doIt(finalErrors.length ? finalErrors : null);\n            });\n          }\n        }\n\n        let res;\n        if (rule.asyncValidator) {\n          res = rule.asyncValidator(rule, data.value, cb, data.source, options);\n        } else if (rule.validator) {\n          res = rule.validator(rule, data.value, cb, data.source, options);\n          if (res === true) {\n            cb();\n          } else if (res === false) {\n            cb(rule.message || `${rule.field} fails`);\n          } else if (res instanceof Array) {\n            cb(res);\n          } else if (res instanceof Error) {\n            cb(res.message);\n          }\n        }\n        if (res && res.then) {\n          res.then(() => cb(), e => cb(e));\n        }\n      },\n      results => {\n        complete(results);\n      },\n    );\n  },\n  getType(rule) {\n    if (rule.type === undefined && rule.pattern instanceof RegExp) {\n      rule.type = 'pattern';\n    }\n    if (\n      typeof rule.validator !== 'function' &&\n      (rule.type && !validators.hasOwnProperty(rule.type))\n    ) {\n      throw new Error(format('Unknown rule type %s', rule.type));\n    }\n    return rule.type || 'string';\n  },\n  getValidationMethod(rule) {\n    if (typeof rule.validator === 'function') {\n      return rule.validator;\n    }\n    const keys = Object.keys(rule);\n    const messageIndex = keys.indexOf('message');\n    if (messageIndex !== -1) {\n      keys.splice(messageIndex, 1);\n    }\n    if (keys.length === 1 && keys[0] === 'required') {\n      return validators.required;\n    }\n    return validators[this.getType(rule)] || false;\n  },\n};\n\nSchema.register = function register(type, validator) {\n  if (typeof validator !== 'function') {\n    throw new Error(\n      'Cannot register a validator by type, validator is not a function',\n    );\n  }\n  validators[type] = validator;\n};\n\nSchema.warning = warning;\n\nSchema.messages = defaultMessages;\n\nexport default Schema;\n"]},"metadata":{},"sourceType":"module"}