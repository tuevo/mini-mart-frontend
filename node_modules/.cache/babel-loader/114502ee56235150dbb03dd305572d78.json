{"ast":null,"code":"var _jsxFileName = \"/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/src/components/utilities/GoogleMap/GoogleMap.js\";\nimport React, { Component } from 'react';\nimport Geocode from \"react-geocode\";\nimport GoogleMapReact from 'google-map-react';\nimport { ShopFilled } from '@ant-design/icons';\nimport './GoogleMap.style.scss';\nimport { Tooltip } from 'antd';\nimport GOOGLE_MAP from '../../../constants/google-map';\n\nconst LocationIcon = ({\n  icon,\n  text\n}) => React.createElement(\"div\", {\n  className: \"google-map__location-icon\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, React.createElement(Tooltip, {\n  title: text,\n  placement: \"right\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, icon));\n\nconst defaultLocation = {\n  lat: 0,\n  lng: 0\n};\nconst defaultAddress = 'Unknown';\nexport default class GoogleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: defaultAddress,\n      location: defaultLocation\n    };\n  }\n\n  async componentWillReceiveProps(props) {\n    const {\n      address\n    } = props;\n    const location = await this.getAddressLocation(address);\n    this.setState({\n      address: address || defaultAddress,\n      location\n    });\n  }\n\n  async getAddressText(latitude, longitude) {\n    try {\n      const res = await Geocode.fromLatLng(latitude, longitude, GOOGLE_MAP.API_KEY, GOOGLE_MAP.GEOCODING.LANGUAGE, GOOGLE_MAP.GEOCODING.REGION);\n      return res.results[0].formatted_address;\n    } catch (error) {\n      return defaultAddress;\n    }\n  }\n\n  async getAddressLocation(address) {\n    try {\n      if (!address) return defaultLocation;\n      const res = await Geocode.fromAddress(address, GOOGLE_MAP.API_KEY, GOOGLE_MAP.GEOCODING.LANGUAGE, GOOGLE_MAP.GEOCODING.REGION);\n      return res.results[0].geometry.location;\n    } catch (error) {\n      return defaultLocation;\n    }\n  }\n\n  render() {\n    const {\n      width,\n      height\n    } = this.props;\n    const {\n      location,\n      address\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"google-map\",\n      style: {\n        width,\n        height\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(GoogleMapReact, {\n      apiKey: GoogleMapParams.apiKey,\n      center: location,\n      defaultZoom: 17,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(LocationIcon, {\n      lat: location.lat,\n      lng: location.lng,\n      icon: React.createElement(ShopFilled, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }),\n      text: address,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/src/components/utilities/GoogleMap/GoogleMap.js"],"names":["React","Component","Geocode","GoogleMapReact","ShopFilled","Tooltip","GOOGLE_MAP","LocationIcon","icon","text","defaultLocation","lat","lng","defaultAddress","GoogleMap","constructor","props","state","address","location","componentWillReceiveProps","getAddressLocation","setState","getAddressText","latitude","longitude","res","fromLatLng","API_KEY","GEOCODING","LANGUAGE","REGION","results","formatted_address","error","fromAddress","geometry","render","width","height","GoogleMapParams","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Geocode from \"react-geocode\";\nimport GoogleMapReact from 'google-map-react';\nimport { ShopFilled } from '@ant-design/icons';\nimport './GoogleMap.style.scss';\nimport { Tooltip } from 'antd';\nimport GOOGLE_MAP from '../../../constants/google-map';\n\nconst LocationIcon = ({ icon, text }) => (\n  <div className=\"google-map__location-icon\">\n    <Tooltip title={text} placement=\"right\">\n      {icon}\n    </Tooltip>\n  </div>\n);\n\nconst defaultLocation = { lat: 0, lng: 0 };\nconst defaultAddress = 'Unknown';\n\nexport default class GoogleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: defaultAddress,\n      location: defaultLocation\n    }\n  }\n\n  async componentWillReceiveProps(props) {\n    const { address } = props;\n    const location = await this.getAddressLocation(address);\n    this.setState({\n      address: address || defaultAddress,\n      location\n    });\n  }\n\n  async getAddressText(latitude, longitude) {\n    try {\n      const res = await Geocode.fromLatLng(\n        latitude,\n        longitude,\n        GOOGLE_MAP.API_KEY,\n        GOOGLE_MAP.GEOCODING.LANGUAGE,\n        GOOGLE_MAP.GEOCODING.REGION\n      );\n      return res.results[0].formatted_address;\n    } catch (error) {\n      return defaultAddress;\n    }\n  }\n\n  async getAddressLocation(address) {\n    try {\n      if (!address)\n        return defaultLocation;\n\n      const res = await Geocode.fromAddress(\n        address,\n        GOOGLE_MAP.API_KEY,\n        GOOGLE_MAP.GEOCODING.LANGUAGE,\n        GOOGLE_MAP.GEOCODING.REGION\n      );\n      return res.results[0].geometry.location;\n    } catch (error) {\n      return defaultLocation;\n    }\n  }\n\n  render() {\n    const { width, height } = this.props;\n    const { location, address } = this.state;\n\n    return (\n      <div className=\"google-map\" style={{ width, height }}>\n        <GoogleMapReact\n          apiKey={GoogleMapParams.apiKey}\n          center={location}\n          defaultZoom={17}\n        >\n          <LocationIcon\n            lat={location.lat}\n            lng={location.lng}\n            icon={<ShopFilled />}\n            text={address}\n          />\n        </GoogleMapReact>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}