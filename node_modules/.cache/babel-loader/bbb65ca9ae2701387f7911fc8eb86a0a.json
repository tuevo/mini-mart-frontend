{"ast":null,"code":"var _jsxFileName = \"/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/src/components/utilities/GoogleMap/GoogleMap.js\";\nimport React, { Component } from 'react';\nimport Geocode from \"react-geocode\";\nimport GoogleMapReact from 'google-map-react';\nimport { ShopFilled } from '@ant-design/icons';\nimport './GoogleMap.style.scss';\nimport { Tooltip } from 'antd';\n\nconst LocationIcon = ({\n  icon,\n  text\n}) => React.createElement(\"div\", {\n  className: \"google-map__location-icon\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}, React.createElement(Tooltip, {\n  title: text,\n  placement: \"right\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, icon));\n\nconst geocodeParams = {\n  apiKey: 'AIzaSyDTkNdUuexN_PZOKtezyqWdO-g3-ewhHiQ',\n  language: 'vn',\n  region: 'Vietnam'\n};\nconst defaultLocation = {\n  lat: 0,\n  lng: 0\n};\nconst defaultAddress = 'Unknown';\nexport default class GoogleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: defaultAddress,\n      location: defaultLocation,\n      onReceiveProps: false\n    };\n  }\n\n  async componentWillReceiveProps(props) {\n    const {\n      address\n    } = props;\n    const location = await this.getAddressLocation(address);\n    const stardardAddress = await this.getAddressText(location.lat, location.lng);\n    this.setState({\n      address: stardardAddress,\n      location,\n      onReceiveProps: true\n    });\n  }\n\n  async getAddressText(latitude, longitude) {\n    try {\n      const res = await Geocode.fromLatLng(latitude, longitude, geocodeParams.apiKey, geocodeParams.language, geocodeParams.region);\n      return res.results[0].formatted_address;\n    } catch (error) {\n      return defaultAddress;\n    }\n  }\n\n  async getAddressLocation(address) {\n    try {\n      if (!address) return defaultLocation;\n      const res = await Geocode.fromAddress(address, geocodeParams.apiKey, geocodeParams.language, geocodeParams.region);\n      return res.results[0].geometry.location;\n    } catch (error) {\n      return defaultLocation;\n    }\n  }\n\n  render() {\n    const {\n      width,\n      height\n    } = this.props;\n    const {\n      location,\n      address\n    } = this.state;\n\n    if (location.lat === 0 && location.lng === 0) {\n      return React.createElement(React.Fragment, null);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"google-map\",\n      style: {\n        width,\n        height\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, this.state.onReceiveProps ? React.createElement(GoogleMapReact, {\n      apiKey: geocodeParams.apiKey,\n      defaultCenter: location,\n      defaultZoom: 17,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(LocationIcon, {\n      lat: location.lat,\n      lng: location.lng,\n      icon: React.createElement(ShopFilled, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }),\n      text: address,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })) : React.createElement(React.Fragment, null));\n  }\n\n}","map":{"version":3,"sources":["/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/src/components/utilities/GoogleMap/GoogleMap.js"],"names":["React","Component","Geocode","GoogleMapReact","ShopFilled","Tooltip","LocationIcon","icon","text","geocodeParams","apiKey","language","region","defaultLocation","lat","lng","defaultAddress","GoogleMap","constructor","props","state","address","location","onReceiveProps","componentWillReceiveProps","getAddressLocation","stardardAddress","getAddressText","setState","latitude","longitude","res","fromLatLng","results","formatted_address","error","fromAddress","geometry","render","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Geocode from \"react-geocode\";\nimport GoogleMapReact from 'google-map-react';\nimport { ShopFilled } from '@ant-design/icons';\nimport './GoogleMap.style.scss';\nimport { Tooltip } from 'antd';\n\nconst LocationIcon = ({ icon, text }) => (\n  <div className=\"google-map__location-icon\">\n    <Tooltip title={text} placement=\"right\">\n      {icon}\n    </Tooltip>\n  </div>\n);\n\nconst geocodeParams = {\n  apiKey: 'AIzaSyDTkNdUuexN_PZOKtezyqWdO-g3-ewhHiQ',\n  language: 'vn',\n  region: 'Vietnam'\n}\n\nconst defaultLocation = { lat: 0, lng: 0 };\nconst defaultAddress = 'Unknown';\n\nexport default class GoogleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: defaultAddress,\n      location: defaultLocation,\n      onReceiveProps: false\n    }\n  }\n\n  async componentWillReceiveProps(props) {\n    const { address } = props;\n    const location = await this.getAddressLocation(address);\n    const stardardAddress = await this.getAddressText(location.lat, location.lng);\n    this.setState({\n      address: stardardAddress,\n      location,\n      onReceiveProps: true\n    });\n  }\n\n  async getAddressText(latitude, longitude) {\n    try {\n      const res = await Geocode.fromLatLng(\n        latitude,\n        longitude,\n        geocodeParams.apiKey,\n        geocodeParams.language,\n        geocodeParams.region\n      );\n      return res.results[0].formatted_address;\n    } catch (error) {\n      return defaultAddress;\n    }\n  }\n\n  async getAddressLocation(address) {\n    try {\n      if (!address)\n        return defaultLocation;\n\n      const res = await Geocode.fromAddress(\n        address,\n        geocodeParams.apiKey,\n        geocodeParams.language,\n        geocodeParams.region\n      );\n      return res.results[0].geometry.location;\n    } catch (error) {\n      return defaultLocation;\n    }\n  }\n\n  render() {\n    const { width, height } = this.props;\n    const { location, address } = this.state;\n\n    if (location.lat === 0 && location.lng === 0) {\n      return <></>;\n    }\n\n    return (\n      <div className=\"google-map\" style={{ width, height }}>\n        {this.state.onReceiveProps ? (\n          <GoogleMapReact\n            apiKey={geocodeParams.apiKey}\n            defaultCenter={location}\n            defaultZoom={17}\n          >\n            <LocationIcon\n              lat={location.lat}\n              lng={location.lng}\n              icon={<ShopFilled />}\n              text={address}\n            />\n          </GoogleMapReact>\n        ) : <></>}\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}