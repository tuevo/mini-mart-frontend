{"ast":null,"code":"var _jsxFileName = \"/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/src/components/pages/Manager/WorkAssignment/BtnAddWorkShiftAssigner/BtnAddWorkShiftAssigner.js\";\nimport React from 'react';\nimport { UsergroupAddOutlined } from '@ant-design/icons';\nimport { Button, Modal, Tooltip, message, List, Avatar, Row, Col, Checkbox } from 'antd';\nimport './BtnAddWorkShiftAssigner.style.scss';\nimport { withCookies } from 'react-cookie';\nimport PageBase from '../../../../utilities/PageBase/PageBase';\nimport USER_ROLES from '../../../../../constants/user-role.constant';\nimport moment from 'moment';\nimport { API } from '../../../../../constants/api.constant';\nimport { COOKIE_NAMES } from '../../../../../constants/cookie-name.constant';\n\nclass BtnAddWorkShiftAssigner extends PageBase {\n  constructor(props) {\n    super(props);\n\n    this.onOK = async () => {\n      const {\n        assigners\n      } = this.state;\n\n      if (assigners.length === 0) {\n        message.error('Vui lòng chọn nhân viên để phân công');\n        return;\n      }\n\n      const {\n        workSchedules,\n        selectedWorkSchedule,\n        selectedWorkDay,\n        selectedWorkShift\n      } = this.props;\n      const res = await (await fetch(API.Manager.workAssignment.addWorkAssignments, {\n        method: 'POST',\n        body: JSON.stringify({\n          workShift: selectedWorkShift._id,\n          assigners\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n          'token': this.props.cookies.get(COOKIE_NAMES.token)\n        },\n        signal: this.abortController.signal\n      })).json();\n\n      if (res.status !== 200) {\n        message.error(res.errors[0]);\n        return;\n      }\n\n      const {\n        workAssignments\n      } = res.data;\n      selectedWorkShift.workAssignments = workAssignments;\n\n      for (let ws of selectedWorkDay.workShifts) {\n        if (ws._id === selectedWorkShift._id) {\n          ws = selectedWorkShift;\n          break;\n        }\n      }\n\n      for (let wsc of workSchedules) {\n        if (wsc._id === selectedWorkSchedule._id) {\n          const workShift = wsc.workShifts.find(ws => ws._id === selectedWorkShift._id);\n          workShift.workAssignments = workAssignments;\n        }\n      }\n\n      this.props.reloadWorkSchedules(workSchedules, selectedWorkSchedule, selectedWorkDay, selectedWorkShift);\n      this.setModalVisible(false);\n      message.success(res.messages[0]);\n    };\n\n    this.state = {\n      isVisible: false,\n      assigners: [],\n      isAllStaffsChecked: false,\n      selectedWorkShift: {}\n    };\n  }\n\n  isWorkShiftAssigner(selectedWorkShift, staff) {\n    const assigner = (selectedWorkShift.workAssignments || []).find(wa => wa.assigner._id === staff._id);\n    return assigner;\n  }\n\n  setModalVisible(isVisible) {\n    if (!isVisible) {\n      this.setState({\n        assigners: [],\n        isAllStaffsChecked: false\n      });\n    }\n\n    this.setState({\n      isVisible\n    });\n  }\n\n  onCancel() {\n    this.setModalVisible(false);\n  }\n\n  onCheckStaff(checked, staffID) {\n    const {\n      staffs\n    } = this.props;\n    let {\n      assigners\n    } = this.state;\n\n    if (checked) {\n      assigners.push(staffID);\n    } else {\n      assigners = assigners.filter(id => id !== staffID);\n    }\n\n    if (assigners.length === staffs.length) {\n      this.setState({\n        isAllStaffsChecked: true\n      });\n    } else {\n      this.setState({\n        isAllStaffsChecked: false\n      });\n    }\n\n    this.setState({\n      assigners\n    });\n  }\n\n  onCheckAllStaffs(checked) {\n    const {\n      staffs\n    } = this.props;\n    let {\n      assigners\n    } = this.state;\n\n    if (checked) {\n      assigners = staffs.map(staff => staff._id);\n    } else {\n      assigners = [];\n    }\n\n    this.setState({\n      assigners,\n      isAllStaffsChecked: checked\n    });\n  }\n\n  render() {\n    const {\n      selectedWorkShift,\n      selectedWorkDay,\n      staffs\n    } = this.props;\n    let {\n      assigners\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"add-work-shift-assigner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      placement: \"bottom\",\n      title: \"Th\\xEAm nh\\xE2n vi\\xEAn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => this.setModalVisible(true),\n      className: \"add-work-shift-assigner__btn-open\",\n      type: \"link\",\n      icon: React.createElement(UsergroupAddOutlined, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }),\n      disabled: Object.keys(selectedWorkShift).length <= 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    })), React.createElement(Modal, {\n      title: React.createElement(\"span\", {\n        style: {\n          color: '#ff8220'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, `${selectedWorkDay.workWeekDay ? selectedWorkDay.workWeekDay + ', ' : ''} ${selectedWorkDay.workYear ? moment(new Date(selectedWorkDay.workYear, selectedWorkDay.workMonth - 1, selectedWorkDay.workDayInMonth)).format('DD/MM/YYYY') + ' (' + moment(selectedWorkShift.startTime).format('HH:mm') + ' - ' + moment(selectedWorkShift.endTime).format('HH:mm') + ') | Phân ca làm việc' : ''}`),\n      centered: true,\n      visible: this.state.isVisible,\n      onOk: () => this.onOK(),\n      onCancel: () => this.onCancel(),\n      okText: \"Ph\\xE2n c\\xF4ng\",\n      cancelText: \"H\\u1EE7y b\\u1ECF\",\n      okButtonProps: {\n        style: {\n          background: '#ff8220',\n          borderColor: '#ff8220'\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Nh\\xE2n vi\\xEAn ch\\u01B0a ph\\xE2n c\\xF4ng (\", staffs.length, \")\"), React.createElement(\"div\", {\n      className: \"add-work-shift-assigner__list-staffs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"add-work-shift-assigner__list-staffs__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 21,\n      className: \"add-work-shift-assigner__list-staffs__header__col-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Ch\\u1ECDn t\\u1EA5t c\\u1EA3\")), React.createElement(Col, {\n      span: 3,\n      className: \"add-work-shift-assigner__list-staffs__header__col-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, staffs.length > 0 ? React.createElement(Checkbox, {\n      onChange: e => this.onCheckAllStaffs(e.target.checked),\n      checked: this.state.isAllStaffsChecked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }) : React.createElement(React.Fragment, null))), React.createElement(List, {\n      itemLayout: \"horizontal\",\n      dataSource: staffs,\n      renderItem: staff => React.createElement(List.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(Row, {\n        style: {\n          width: '100%'\n        },\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(Col, {\n        span: 21,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(List.Item.Meta, {\n        avatar: React.createElement(Avatar, {\n          src: staff.avatar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }),\n        title: staff.fullname,\n        description: USER_ROLES[staff.role].name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      })), React.createElement(Col, {\n        span: 3,\n        className: \"add-work-shift-assigner__list-staffs__checkbox-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        onChange: e => this.onCheckStaff(e.target.checked, staff._id),\n        checked: assigners.find(id => id === staff._id) ? true : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default withCookies(BtnAddWorkShiftAssigner);","map":{"version":3,"sources":["/home/viettran/Desktop/cnpm-19hc-group04/final-project/front-end/src/components/pages/Manager/WorkAssignment/BtnAddWorkShiftAssigner/BtnAddWorkShiftAssigner.js"],"names":["React","UsergroupAddOutlined","Button","Modal","Tooltip","message","List","Avatar","Row","Col","Checkbox","withCookies","PageBase","USER_ROLES","moment","API","COOKIE_NAMES","BtnAddWorkShiftAssigner","constructor","props","onOK","assigners","state","length","error","workSchedules","selectedWorkSchedule","selectedWorkDay","selectedWorkShift","res","fetch","Manager","workAssignment","addWorkAssignments","method","body","JSON","stringify","workShift","_id","headers","cookies","get","token","signal","abortController","json","status","errors","workAssignments","data","ws","workShifts","wsc","find","reloadWorkSchedules","setModalVisible","success","messages","isVisible","isAllStaffsChecked","isWorkShiftAssigner","staff","assigner","wa","setState","onCancel","onCheckStaff","checked","staffID","staffs","push","filter","id","onCheckAllStaffs","map","render","Object","keys","color","workWeekDay","workYear","Date","workMonth","workDayInMonth","format","startTime","endTime","style","background","borderColor","e","target","width","avatar","fullname","role","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { UsergroupAddOutlined } from '@ant-design/icons';\nimport { Button, Modal, Tooltip, message, List, Avatar, Row, Col, Checkbox } from 'antd';\nimport './BtnAddWorkShiftAssigner.style.scss';\nimport { withCookies } from 'react-cookie';\nimport PageBase from '../../../../utilities/PageBase/PageBase';\nimport USER_ROLES from '../../../../../constants/user-role.constant';\nimport moment from 'moment';\nimport { API } from '../../../../../constants/api.constant';\nimport { COOKIE_NAMES } from '../../../../../constants/cookie-name.constant';\n\nclass BtnAddWorkShiftAssigner extends PageBase {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isVisible: false,\n      assigners: [],\n      isAllStaffsChecked: false,\n      selectedWorkShift: {}\n    }\n  }\n\n  isWorkShiftAssigner(selectedWorkShift, staff) {\n    const assigner = (selectedWorkShift.workAssignments || []).find(wa => wa.assigner._id === staff._id);\n    return assigner;\n  }\n\n  setModalVisible(isVisible) {\n    if (!isVisible) {\n      this.setState({\n        assigners: [],\n        isAllStaffsChecked: false\n      });\n    }\n    this.setState({ isVisible });\n  }\n\n  onOK = async () => {\n    const { assigners } = this.state;\n    if (assigners.length === 0) {\n      message.error('Vui lòng chọn nhân viên để phân công');\n      return;\n    }\n\n    const {\n      workSchedules,\n      selectedWorkSchedule,\n      selectedWorkDay,\n      selectedWorkShift\n    } = this.props;\n\n    const res = await (\n      await fetch(\n        API.Manager.workAssignment.addWorkAssignments,\n        {\n          method: 'POST',\n          body: JSON.stringify({\n            workShift: selectedWorkShift._id,\n            assigners\n          }),\n          headers: {\n            'Content-type': 'application/json; charset=UTF-8',\n            'token': this.props.cookies.get(COOKIE_NAMES.token)\n          },\n          signal: this.abortController.signal\n        }\n      )\n    ).json();\n\n    if (res.status !== 200) {\n      message.error(res.errors[0]);\n      return;\n    }\n\n    const { workAssignments } = res.data;\n    selectedWorkShift.workAssignments = workAssignments;\n\n    for (let ws of selectedWorkDay.workShifts) {\n      if (ws._id === selectedWorkShift._id) {\n        ws = selectedWorkShift;\n        break;\n      }\n    }\n\n    for (let wsc of workSchedules) {\n      if (wsc._id === selectedWorkSchedule._id) {\n        const workShift = wsc.workShifts.find(ws => ws._id === selectedWorkShift._id);\n        workShift.workAssignments = workAssignments;\n      }\n    }\n\n    this.props.reloadWorkSchedules(workSchedules, selectedWorkSchedule, selectedWorkDay, selectedWorkShift);\n    this.setModalVisible(false);\n    message.success(res.messages[0]);\n  }\n\n  onCancel() {\n    this.setModalVisible(false);\n  }\n\n  onCheckStaff(checked, staffID) {\n    const { staffs } = this.props;\n    let { assigners } = this.state;\n\n    if (checked) {\n      assigners.push(staffID);\n    } else {\n      assigners = assigners.filter(id => id !== staffID);\n    }\n\n    if (assigners.length === staffs.length) {\n      this.setState({ isAllStaffsChecked: true });\n    } else {\n      this.setState({ isAllStaffsChecked: false });\n    }\n\n    this.setState({ assigners });\n  }\n\n  onCheckAllStaffs(checked) {\n    const { staffs } = this.props;\n\n    let { assigners } = this.state;\n    if (checked) {\n      assigners = staffs.map(staff => staff._id);\n    } else {\n      assigners = [];\n    }\n\n    this.setState({ assigners, isAllStaffsChecked: checked });\n  }\n\n  render() {\n    const { selectedWorkShift, selectedWorkDay, staffs } = this.props;\n    let { assigners } = this.state;\n\n    return (\n      <div className=\"add-work-shift-assigner\">\n        <Tooltip placement=\"bottom\" title=\"Thêm nhân viên\">\n          <Button\n            onClick={() => this.setModalVisible(true)}\n            className=\"add-work-shift-assigner__btn-open\"\n            type=\"link\"\n            icon={<UsergroupAddOutlined />}\n            disabled={Object.keys(selectedWorkShift).length <= 1}\n          />\n        </Tooltip>\n        <Modal\n          title={<span style={{ color: '#ff8220' }}>{`${selectedWorkDay.workWeekDay ? selectedWorkDay.workWeekDay + ', ' : ''} ${selectedWorkDay.workYear ? moment(new Date(selectedWorkDay.workYear, selectedWorkDay.workMonth - 1, selectedWorkDay.workDayInMonth)).format('DD/MM/YYYY') + ' (' + moment(selectedWorkShift.startTime).format('HH:mm') + ' - ' + moment(selectedWorkShift.endTime).format('HH:mm') + ') | Phân ca làm việc' : ''}`}</span>}\n          centered\n          visible={this.state.isVisible}\n          onOk={() => this.onOK()}\n          onCancel={() => this.onCancel()}\n          okText=\"Phân công\"\n          cancelText=\"Hủy bỏ\"\n          okButtonProps={{ style: { background: '#ff8220', borderColor: '#ff8220' } }}\n        >\n          <h3>Nhân viên chưa phân công ({staffs.length})</h3>\n\n          <div className=\"add-work-shift-assigner__list-staffs\">\n            <Row className=\"add-work-shift-assigner__list-staffs__header\">\n              <Col span={21} className=\"add-work-shift-assigner__list-staffs__header__col-1\">\n                <span>Chọn tất cả</span>\n              </Col>\n              <Col span={3} className=\"add-work-shift-assigner__list-staffs__header__col-2\">\n                {staffs.length > 0 ? (\n                  <Checkbox\n                    onChange={e => this.onCheckAllStaffs(e.target.checked)}\n                    checked={this.state.isAllStaffsChecked} />\n                ) : <></>}\n              </Col>\n            </Row>\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={staffs}\n              renderItem={staff => (\n                <List.Item>\n                  <Row style={{ width: '100%' }} className=\"animated fadeIn\">\n                    <Col span={21}>\n                      <List.Item.Meta\n                        avatar={<Avatar src={staff.avatar} />}\n                        title={staff.fullname}\n                        description={USER_ROLES[staff.role].name}\n                      />\n                    </Col>\n                    <Col span={3} className=\"add-work-shift-assigner__list-staffs__checkbox-wrapper\">\n                      <Checkbox\n                        onChange={e => this.onCheckStaff(e.target.checked, staff._id)}\n                        checked={assigners.find(id => id === staff._id) ? true : false} />\n                    </Col>\n                  </Row>\n                </List.Item>\n              )}\n            />\n          </div>\n\n        </Modal>\n      </div>\n    )\n  }\n}\nexport default withCookies(BtnAddWorkShiftAssigner);"]},"metadata":{},"sourceType":"module"}